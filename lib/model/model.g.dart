// GENERATED CODE - DO NOT MODIFY BY HAND

part of 'model.dart';

// **************************************************************************
// SqfEntityGenerator
// **************************************************************************

//  These classes was generated by SqfEntity
//  Copyright (c) 2019, All rights reserved. Use of this source code is governed by a
//  Apache license that can be found in the LICENSE file.

//  To use these SqfEntity classes do following:
//  - import model.dart into where to use
//  - start typing ex:Product.select()... (add a few filters with fluent methods)...(add orderBy/orderBydesc if you want)...
//  - and then just put end of filters / or end of only select()  toSingle() / or toList()
//  - you can select one or return List<yourObject> by your filters and orders
//  - also you can batch update or batch delete by using delete/update methods instead of tosingle/tolist methods
//    Enjoy.. Huseyin Tokpunar

// BEGIN TABLES
// Product TABLE
class TableProduct extends SqfEntityTableBase {
  TableProduct() {
    // declare properties of EntityTable
    tableName = 'product';
    primaryKeyName = 'id';
    primaryKeyType = PrimaryKeyType.integer_auto_incremental;
    useSoftDeleting = true;
    // when useSoftDeleting is true, creates a field named 'isDeleted' on the table, and set to '1' this field when item deleted (does not hard delete)

    // declare fields
    fields = [
      SqfEntityFieldBase('name', DbType.text,
          isUnique: false, isNotNull: false, isIndex: false),
      SqfEntityFieldBase('isActive', DbType.bool,
          defaultValue: true,
          isUnique: false,
          isNotNull: false,
          isIndex: false),
      SqfEntityFieldBase('recentlyUsed', DbType.datetimeUtc,
          defaultValue: DateTime.now(),
          isUnique: false,
          isNotNull: false,
          isIndex: false,
          minValue: DateTime.parse('1900-01-01')),
      SqfEntityFieldBase('createdDate', DbType.datetimeUtc,
          defaultValue: DateTime.now(),
          isUnique: false,
          isNotNull: false,
          isIndex: false,
          minValue: DateTime.parse('1900-01-01')),
      SqfEntityFieldBase('favorite', DbType.bool,
          defaultValue: false,
          isUnique: false,
          isNotNull: false,
          isIndex: false),
    ];
    super.init();
  }
  static SqfEntityTableBase? _instance;
  static SqfEntityTableBase get getInstance {
    return _instance = _instance ?? TableProduct();
  }
}

// Item TABLE
class TableItem extends SqfEntityTableBase {
  TableItem() {
    // declare properties of EntityTable
    tableName = 'items';
    primaryKeyName = 'id';
    primaryKeyType = PrimaryKeyType.integer_auto_incremental;
    useSoftDeleting = true;
    // when useSoftDeleting is true, creates a field named 'isDeleted' on the table, and set to '1' this field when item deleted (does not hard delete)

    // declare fields
    fields = [
      SqfEntityFieldBase('description', DbType.text,
          isUnique: false, isNotNull: false, isIndex: false),
      SqfEntityFieldBase('price', DbType.real,
          defaultValue: 0, isUnique: false, isNotNull: false, isIndex: false),
      SqfEntityFieldBase('quantity', DbType.real,
          defaultValue: 0, isUnique: false, isNotNull: false, isIndex: false),
      SqfEntityFieldBase('totalPrice', DbType.real,
          defaultValue: 0, isUnique: false, isNotNull: false, isIndex: false),
      SqfEntityFieldBase('sequence', DbType.integer,
          isUnique: false, isNotNull: true, isIndex: false),
      SqfEntityFieldRelationshipBase(
          TableProduct.getInstance, DeleteRule.CASCADE,
          relationType: RelationType.ONE_TO_MANY,
          fieldName: 'productId',
          defaultValue: 1,
          isUnique: false,
          isNotNull: false,
          isIndex: false),
      SqfEntityFieldBase('datetime', DbType.datetime,
          defaultValue: DateTime.now(),
          isUnique: false,
          isNotNull: false,
          isIndex: false,
          minValue: DateTime.parse('1900-01-01')),
    ];
    super.init();
  }
  static SqfEntityTableBase? _instance;
  static SqfEntityTableBase get getInstance {
    return _instance = _instance ?? TableItem();
  }
}

// Company TABLE
class TableCompany extends SqfEntityTableBase {
  TableCompany() {
    // declare properties of EntityTable
    tableName = 'company';
    primaryKeyName = 'id';
    primaryKeyType = PrimaryKeyType.integer_auto_incremental;
    useSoftDeleting = true;
    // when useSoftDeleting is true, creates a field named 'isDeleted' on the table, and set to '1' this field when item deleted (does not hard delete)

    // declare fields
    fields = [
      SqfEntityFieldBase('companyName', DbType.text,
          isUnique: false, isNotNull: false, isIndex: false),
      SqfEntityFieldBase('addressLine1', DbType.text,
          defaultValue: '', isUnique: false, isNotNull: false, isIndex: false),
      SqfEntityFieldBase('addressLine2', DbType.text,
          defaultValue: '', isUnique: false, isNotNull: false, isIndex: false),
      SqfEntityFieldBase('mobile', DbType.text,
          defaultValue: '', isUnique: false, isNotNull: false, isIndex: false),
      SqfEntityFieldBase('email', DbType.text,
          defaultValue: '', isUnique: false, isNotNull: false, isIndex: false),
      SqfEntityFieldBase('currency', DbType.text,
          isUnique: false, isNotNull: false, isIndex: false),
      SqfEntityFieldBase('logoUrl', DbType.text,
          isUnique: false, isNotNull: false, isIndex: false),
      SqfEntityFieldBase('updated', DbType.datetimeUtc,
          defaultValue: DateTime.now(),
          isUnique: false,
          isNotNull: false,
          isIndex: false,
          minValue: DateTime.parse('1900-01-01')),
      SqfEntityFieldBase('createdDate', DbType.datetimeUtc,
          defaultValue: DateTime.now(),
          isUnique: false,
          isNotNull: false,
          isIndex: false,
          minValue: DateTime.parse('1900-01-01')),
    ];
    super.init();
  }
  static SqfEntityTableBase? _instance;
  static SqfEntityTableBase get getInstance {
    return _instance = _instance ?? TableCompany();
  }
}
// END TABLES

// BEGIN SEQUENCES
// identity SEQUENCE
class SequenceIdentitySequence extends SqfEntitySequenceBase {
  SequenceIdentitySequence() {
    sequenceName = 'identity';
    maxValue =
        9007199254740991; /* optional. default is max int (9.223.372.036.854.775.807) */
    cycle = false; /* optional. default is false; */
    minValue = 0; /* optional. default is 0 */
    incrementBy = 1; /* optional. default is 1 */
    startWith = 0; /* optional. default is 0 */
    super.init();
  }
  static SequenceIdentitySequence? _instance;
  static SequenceIdentitySequence get getInstance {
    return _instance = _instance ?? SequenceIdentitySequence();
  }
}
// END SEQUENCES

// BEGIN DATABASE MODEL
class MyDbModel extends SqfEntityModelProvider {
  MyDbModel() {
    databaseName = myDbModel.databaseName;
    password = myDbModel.password;
    dbVersion = myDbModel.dbVersion;
    databaseTables = [
      TableProduct.getInstance,
      TableItem.getInstance,
      TableCompany.getInstance,
    ];

    sequences = [
      SequenceIdentitySequence.getInstance,
    ];

    bundledDatabasePath = myDbModel
        .bundledDatabasePath; //'assets/sample.db'; // This value is optional. When bundledDatabasePath is empty then EntityBase creats a new database when initializing the database
  }
  Map<String, dynamic> getControllers() {
    final controllers = <String, dynamic>{};

    return controllers;
  }
}
// END DATABASE MODEL

// BEGIN ENTITIES
// region Product
class Product {
  Product(
      {this.id,
      this.name,
      this.isActive,
      this.recentlyUsed,
      this.createdDate,
      this.favorite,
      this.isDeleted}) {
    _setDefaultValues();
  }
  Product.withFields(this.name, this.isActive, this.recentlyUsed,
      this.createdDate, this.favorite, this.isDeleted) {
    _setDefaultValues();
  }
  Product.withId(this.id, this.name, this.isActive, this.recentlyUsed,
      this.createdDate, this.favorite, this.isDeleted) {
    _setDefaultValues();
  }
  // fromMap v2.0
  Product.fromMap(Map<String, dynamic> o, {bool setDefaultValues = true}) {
    if (setDefaultValues) {
      _setDefaultValues();
    }
    id = int.tryParse(o['id'].toString());
    if (o['name'] != null) {
      name = o['name'].toString();
    }
    if (o['isActive'] != null) {
      isActive =
          o['isActive'].toString() == '1' || o['isActive'].toString() == 'true';
    }
    if (o['recentlyUsed'] != null) {
      recentlyUsed = int.tryParse(o['recentlyUsed'].toString()) != null
          ? DateTime.fromMillisecondsSinceEpoch(
              int.tryParse(o['recentlyUsed'].toString())!,
              isUtc: true)
          : DateTime.tryParse(o['recentlyUsed'].toString());
    }
    if (o['createdDate'] != null) {
      createdDate = int.tryParse(o['createdDate'].toString()) != null
          ? DateTime.fromMillisecondsSinceEpoch(
              int.tryParse(o['createdDate'].toString())!,
              isUtc: true)
          : DateTime.tryParse(o['createdDate'].toString());
    }
    if (o['favorite'] != null) {
      favorite =
          o['favorite'].toString() == '1' || o['favorite'].toString() == 'true';
    }
    isDeleted = o['isDeleted'] != null
        ? o['isDeleted'] == 1 || o['isDeleted'] == true
        : null;
  }
  // FIELDS (Product)
  int? id;
  String? name;
  bool? isActive;
  DateTime? recentlyUsed;
  DateTime? createdDate;
  bool? favorite;
  bool? isDeleted;

  BoolResult? saveResult;
  // end FIELDS (Product)

// COLLECTIONS & VIRTUALS (Product)
  /// to load children of items to this field, use preload parameter. Ex: toList(preload:true) or toSingle(preload:true) or getById(preload:true)
  /// You can also specify this object into certain preload fields!. Ex: toList(preload:true, preloadFields:['plItems', 'plField2'..]) or so on..
  List<Item>? plItems;

  /// get Item(s) filtered by id=productId
  ItemFilterBuilder? getItems(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    if (id == null) {
      return null;
    }
    return Item()
        .select(columnsToSelect: columnsToSelect, getIsDeleted: getIsDeleted)
        .productId
        .equals(id)
        .and;
  }

// END COLLECTIONS & VIRTUALS (Product)

  static const bool _softDeleteActivated = true;
  ProductManager? __mnProduct;

  ProductManager get _mnProduct {
    return __mnProduct = __mnProduct ?? ProductManager();
  }

  // METHODS
  Map<String, dynamic> toMap(
      {bool forQuery = false, bool forJson = false, bool forView = false}) {
    final map = <String, dynamic>{};
    if (id != null) {
      map['id'] = id;
    }
    if (name != null) {
      map['name'] = name;
    }

    if (isActive != null) {
      map['isActive'] = forQuery ? (isActive! ? 1 : 0) : isActive;
    }

    if (recentlyUsed != null) {
      map['recentlyUsed'] = forJson
          ? recentlyUsed!.toUtc().toString()
          : forQuery
              ? recentlyUsed!.millisecondsSinceEpoch
              : recentlyUsed;
    }

    if (createdDate != null) {
      map['createdDate'] = forJson
          ? createdDate!.toUtc().toString()
          : forQuery
              ? createdDate!.millisecondsSinceEpoch
              : createdDate;
    }

    if (favorite != null) {
      map['favorite'] = forQuery ? (favorite! ? 1 : 0) : favorite;
    }

    if (isDeleted != null) {
      map['isDeleted'] = forQuery ? (isDeleted! ? 1 : 0) : isDeleted;
    }

    return map;
  }

  Future<Map<String, dynamic>> toMapWithChildren(
      [bool forQuery = false,
      bool forJson = false,
      bool forView = false]) async {
    final map = <String, dynamic>{};
    if (id != null) {
      map['id'] = id;
    }
    if (name != null) {
      map['name'] = name;
    }

    if (isActive != null) {
      map['isActive'] = forQuery ? (isActive! ? 1 : 0) : isActive;
    }

    if (recentlyUsed != null) {
      map['recentlyUsed'] = forJson
          ? recentlyUsed!.toUtc().toString()
          : forQuery
              ? recentlyUsed!.millisecondsSinceEpoch
              : recentlyUsed;
    }

    if (createdDate != null) {
      map['createdDate'] = forJson
          ? createdDate!.toUtc().toString()
          : forQuery
              ? createdDate!.millisecondsSinceEpoch
              : createdDate;
    }

    if (favorite != null) {
      map['favorite'] = forQuery ? (favorite! ? 1 : 0) : favorite;
    }

    if (isDeleted != null) {
      map['isDeleted'] = forQuery ? (isDeleted! ? 1 : 0) : isDeleted;
    }

// COLLECTIONS (Product)
    if (!forQuery) {
      map['Items'] = await getItems()!.toMapList();
    }
// END COLLECTIONS (Product)

    return map;
  }

  /// This method returns Json String [Product]
  String toJson() {
    return json.encode(toMap(forJson: true));
  }

  /// This method returns Json String [Product]
  Future<String> toJsonWithChilds() async {
    return json.encode(await toMapWithChildren(false, true));
  }

  List<dynamic> toArgs() {
    return [
      name,
      isActive,
      recentlyUsed != null ? recentlyUsed!.millisecondsSinceEpoch : null,
      createdDate != null ? createdDate!.millisecondsSinceEpoch : null,
      favorite,
      isDeleted
    ];
  }

  List<dynamic> toArgsWithIds() {
    return [
      id,
      name,
      isActive,
      recentlyUsed != null ? recentlyUsed!.millisecondsSinceEpoch : null,
      createdDate != null ? createdDate!.millisecondsSinceEpoch : null,
      favorite,
      isDeleted
    ];
  }

  static Future<List<Product>?> fromWebUrl(Uri uri,
      {Map<String, String>? headers}) async {
    try {
      final response = await http.get(uri, headers: headers);
      return await fromJson(response.body);
    } catch (e) {
      print(
          'SQFENTITY ERROR Product.fromWebUrl: ErrorMessage: ${e.toString()}');
      return null;
    }
  }

  Future<http.Response> postUrl(Uri uri, {Map<String, String>? headers}) {
    return http.post(uri, headers: headers, body: toJson());
  }

  static Future<List<Product>> fromJson(String jsonBody) async {
    final Iterable list = await json.decode(jsonBody) as Iterable;
    var objList = <Product>[];
    try {
      objList = list
          .map((product) => Product.fromMap(product as Map<String, dynamic>))
          .toList();
    } catch (e) {
      print('SQFENTITY ERROR Product.fromJson: ErrorMessage: ${e.toString()}');
    }
    return objList;
  }

  static Future<List<Product>> fromMapList(List<dynamic> data,
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields,
      bool setDefaultValues = true}) async {
    final List<Product> objList = <Product>[];
    loadedFields = loadedFields ?? [];
    for (final map in data) {
      final obj = Product.fromMap(map as Map<String, dynamic>,
          setDefaultValues: setDefaultValues);
      // final List<String> _loadedFields = List<String>.from(loadedFields);

      // RELATIONSHIPS PRELOAD CHILD
      if (preload) {
        loadedFields = loadedFields ?? [];
        if (/*!_loadedfields!.contains('product.plItems') && */ (preloadFields ==
                null ||
            preloadFields.contains('plItems'))) {
          /*_loadedfields!.add('product.plItems'); */ obj.plItems =
              obj.plItems ??
                  await obj.getItems()!.toList(
                      preload: preload,
                      preloadFields: preloadFields,
                      loadParents: false /*, loadedFields:_loadedFields*/);
        }
      } // END RELATIONSHIPS PRELOAD CHILD

      objList.add(obj);
    }
    return objList;
  }

  /// returns Product by ID if exist, otherwise returns null
  ///
  /// Primary Keys: int? id
  ///
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  ///
  /// ex: getById(preload:true) -> Loads all related objects
  ///
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  ///
  /// ex: getById(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  ///
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  ///
  /// <returns>returns Product if exist, otherwise returns null
  Future<Product?> getById(int? id,
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    if (id == null) {
      return null;
    }
    Product? obj;
    final data = await _mnProduct.getById([id]);
    if (data.length != 0) {
      obj = Product.fromMap(data[0] as Map<String, dynamic>);
      // final List<String> _loadedFields = loadedFields ?? [];

      // RELATIONSHIPS PRELOAD CHILD
      if (preload) {
        loadedFields = loadedFields ?? [];
        if (/*!_loadedfields!.contains('product.plItems') && */ (preloadFields ==
                null ||
            preloadFields.contains('plItems'))) {
          /*_loadedfields!.add('product.plItems'); */ obj.plItems =
              obj.plItems ??
                  await obj.getItems()!.toList(
                      preload: preload,
                      preloadFields: preloadFields,
                      loadParents: false /*, loadedFields:_loadedFields*/);
        }
      } // END RELATIONSHIPS PRELOAD CHILD

    } else {
      obj = null;
    }
    return obj;
  }

  /// Saves the (Product) object. If the id field is null, saves as a new record and returns new id, if id is not null then updates record

  /// <returns>Returns id
  Future<int?> save() async {
    if (id == null || id == 0) {
      id = await _mnProduct.insert(this);
    } else {
      // id= await _upsert(); // removed in sqfentity_gen 1.3.0+6
      await _mnProduct.update(this);
    }

    return id;
  }

  /// saveAs Product. Returns a new Primary Key value of Product

  /// <returns>Returns a new Primary Key value of Product
  Future<int?> saveAs() async {
    id = null;

    return save();
  }

  /// saveAll method saves the sent List<Product> as a bulk in one transaction
  ///
  /// Returns a <List<BoolResult>>
  static Future<List<dynamic>> saveAll(List<Product> products) async {
    // final results = _mnProduct.saveAll('INSERT OR REPLACE INTO product (id,name, isActive, recentlyUsed, createdDate, favorite,isDeleted)  VALUES (?,?,?,?,?,?,?)',products);
    // return results; removed in sqfentity_gen 1.3.0+6
    await MyDbModel().batchStart();
    for (final obj in products) {
      await obj.save();
    }
    //    return MyDbModel().batchCommit();
    final result = await MyDbModel().batchCommit();
    for (int i = 0; i < products.length; i++) {
      if (products[i].id == null) {
        products[i].id = result![i] as int;
      }
    }

    return result!;
  }

  /// Updates if the record exists, otherwise adds a new row

  /// <returns>Returns id

  Future<int?> upsert() async {
    try {
      final result = await _mnProduct.rawInsert(
          'INSERT OR REPLACE INTO product (id,name, isActive, recentlyUsed, createdDate, favorite,isDeleted)  VALUES (?,?,?,?,?,?,?)',
          [
            id,
            name,
            isActive,
            recentlyUsed != null ? recentlyUsed!.millisecondsSinceEpoch : null,
            createdDate != null ? createdDate!.millisecondsSinceEpoch : null,
            favorite,
            isDeleted
          ]);
      if (result! > 0) {
        saveResult = BoolResult(
            success: true,
            successMessage: 'Product id=$id updated successfully');
      } else {
        saveResult = BoolResult(
            success: false, errorMessage: 'Product id=$id did not update');
      }
      return id;
    } catch (e) {
      saveResult = BoolResult(
          success: false,
          errorMessage: 'Product Save failed. Error: ${e.toString()}');
      return null;
    }
  }

  /// inserts or replaces the sent List<<Product>> as a bulk in one transaction.
  ///
  /// upsertAll() method is faster then saveAll() method. upsertAll() should be used when you are sure that the primary key is greater than zero
  ///
  /// Returns a BoolCommitResult
  Future<BoolCommitResult> upsertAll(List<Product> products) async {
    final results = await _mnProduct.rawInsertAll(
        'INSERT OR REPLACE INTO product (id,name, isActive, recentlyUsed, createdDate, favorite,isDeleted)  VALUES (?,?,?,?,?,?,?)',
        products);
    return results;
  }

  /// Deletes Product

  /// <returns>BoolResult res.success=Deleted, not res.success=Can not deleted

  Future<BoolResult> delete([bool hardDelete = false]) async {
    print('SQFENTITIY: delete Product invoked (id=$id)');
    var result = BoolResult(success: false);
    {
      result =
          await Item().select().productId.equals(id).and.delete(hardDelete);
    }
    if (!result.success) {
      return result;
    }
    if (!_softDeleteActivated || hardDelete || isDeleted!) {
      return _mnProduct
          .delete(QueryParams(whereString: 'id=?', whereArguments: [id]));
    } else {
      return _mnProduct.updateBatch(
          QueryParams(whereString: 'id=?', whereArguments: [id]),
          {'isDeleted': 1});
    }
  }

  /// Recover Product>

  /// <returns>BoolResult res.success=Recovered, not res.success=Can not recovered
  Future<BoolResult> recover([bool recoverChilds = true]) async {
    print('SQFENTITIY: recover Product invoked (id=$id)');
    var result = BoolResult(success: false);
    if (recoverChilds) {
      result = await Item()
          .select(getIsDeleted: true)
          .isDeleted
          .equals(true)
          .and
          .productId
          .equals(id)
          .and
          .update({'isDeleted': 0});
    }
    if (!result.success && recoverChilds) {
      return result;
    }
    {
      return _mnProduct.updateBatch(
          QueryParams(whereString: 'id=?', whereArguments: [id]),
          {'isDeleted': 0});
    }
  }

  ProductFilterBuilder select(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    return ProductFilterBuilder(this)
      .._getIsDeleted = getIsDeleted == true
      ..qparams.selectColumns = columnsToSelect;
  }

  ProductFilterBuilder distinct(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    return ProductFilterBuilder(this)
      .._getIsDeleted = getIsDeleted == true
      ..qparams.selectColumns = columnsToSelect
      ..qparams.distinct = true;
  }

  void _setDefaultValues() {
    isActive = isActive ?? true;
    recentlyUsed = recentlyUsed ?? DateTime.now();
    createdDate = createdDate ?? DateTime.now();
    favorite = favorite ?? false;
    isDeleted = isDeleted ?? false;
  }
  // END METHODS
  // BEGIN CUSTOM CODE
  /*
      you can define customCode property of your SqfEntityTable constant. For example:
      const tablePerson = SqfEntityTable(
      tableName: 'person',
      primaryKeyName: 'id',
      primaryKeyType: PrimaryKeyType.integer_auto_incremental,
      fields: [
        SqfEntityField('firstName', DbType.text),
        SqfEntityField('lastName', DbType.text),
      ],
      customCode: '''
       String fullName()
       { 
         return '$firstName $lastName';
       }
      ''');
     */
  // END CUSTOM CODE
}
// endregion product

// region ProductField
class ProductField extends SearchCriteria {
  ProductField(this.productFB);
  // { param = DbParameter(); }
  DbParameter param = DbParameter();
  String _waitingNot = '';
  ProductFilterBuilder productFB;

  ProductField get not {
    _waitingNot = ' NOT ';
    return this;
  }

  ProductFilterBuilder equals(dynamic pValue) {
    param.expression = '=';
    productFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, productFB.parameters, param, SqlSyntax.EQuals,
            productFB._addedBlocks)
        : setCriteria(pValue, productFB.parameters, param, SqlSyntax.NotEQuals,
            productFB._addedBlocks);
    _waitingNot = '';
    productFB._addedBlocks.needEndBlock![productFB._blockIndex] =
        productFB._addedBlocks.retVal;
    return productFB;
  }

  ProductFilterBuilder equalsOrNull(dynamic pValue) {
    param.expression = '=';
    productFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, productFB.parameters, param,
            SqlSyntax.EQualsOrNull, productFB._addedBlocks)
        : setCriteria(pValue, productFB.parameters, param,
            SqlSyntax.NotEQualsOrNull, productFB._addedBlocks);
    _waitingNot = '';
    productFB._addedBlocks.needEndBlock![productFB._blockIndex] =
        productFB._addedBlocks.retVal;
    return productFB;
  }

  ProductFilterBuilder isNull() {
    productFB._addedBlocks = setCriteria(
        0,
        productFB.parameters,
        param,
        SqlSyntax.IsNULL.replaceAll(SqlSyntax.notKeyword, _waitingNot),
        productFB._addedBlocks);
    _waitingNot = '';
    productFB._addedBlocks.needEndBlock![productFB._blockIndex] =
        productFB._addedBlocks.retVal;
    return productFB;
  }

  ProductFilterBuilder contains(dynamic pValue) {
    if (pValue != null) {
      productFB._addedBlocks = setCriteria(
          '%${pValue.toString()}%',
          productFB.parameters,
          param,
          SqlSyntax.Contains.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          productFB._addedBlocks);
      _waitingNot = '';
      productFB._addedBlocks.needEndBlock![productFB._blockIndex] =
          productFB._addedBlocks.retVal;
    }
    return productFB;
  }

  ProductFilterBuilder startsWith(dynamic pValue) {
    if (pValue != null) {
      productFB._addedBlocks = setCriteria(
          '${pValue.toString()}%',
          productFB.parameters,
          param,
          SqlSyntax.Contains.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          productFB._addedBlocks);
      _waitingNot = '';
      productFB._addedBlocks.needEndBlock![productFB._blockIndex] =
          productFB._addedBlocks.retVal;
      productFB._addedBlocks.needEndBlock![productFB._blockIndex] =
          productFB._addedBlocks.retVal;
    }
    return productFB;
  }

  ProductFilterBuilder endsWith(dynamic pValue) {
    if (pValue != null) {
      productFB._addedBlocks = setCriteria(
          '%${pValue.toString()}',
          productFB.parameters,
          param,
          SqlSyntax.Contains.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          productFB._addedBlocks);
      _waitingNot = '';
      productFB._addedBlocks.needEndBlock![productFB._blockIndex] =
          productFB._addedBlocks.retVal;
    }
    return productFB;
  }

  ProductFilterBuilder between(dynamic pFirst, dynamic pLast) {
    if (pFirst != null && pLast != null) {
      productFB._addedBlocks = setCriteria(
          pFirst,
          productFB.parameters,
          param,
          SqlSyntax.Between.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          productFB._addedBlocks,
          pLast);
    } else if (pFirst != null) {
      if (_waitingNot != '') {
        productFB._addedBlocks = setCriteria(pFirst, productFB.parameters,
            param, SqlSyntax.LessThan, productFB._addedBlocks);
      } else {
        productFB._addedBlocks = setCriteria(pFirst, productFB.parameters,
            param, SqlSyntax.GreaterThanOrEquals, productFB._addedBlocks);
      }
    } else if (pLast != null) {
      if (_waitingNot != '') {
        productFB._addedBlocks = setCriteria(pLast, productFB.parameters, param,
            SqlSyntax.GreaterThan, productFB._addedBlocks);
      } else {
        productFB._addedBlocks = setCriteria(pLast, productFB.parameters, param,
            SqlSyntax.LessThanOrEquals, productFB._addedBlocks);
      }
    }
    _waitingNot = '';
    productFB._addedBlocks.needEndBlock![productFB._blockIndex] =
        productFB._addedBlocks.retVal;
    return productFB;
  }

  ProductFilterBuilder greaterThan(dynamic pValue) {
    param.expression = '>';
    productFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, productFB.parameters, param,
            SqlSyntax.GreaterThan, productFB._addedBlocks)
        : setCriteria(pValue, productFB.parameters, param,
            SqlSyntax.LessThanOrEquals, productFB._addedBlocks);
    _waitingNot = '';
    productFB._addedBlocks.needEndBlock![productFB._blockIndex] =
        productFB._addedBlocks.retVal;
    return productFB;
  }

  ProductFilterBuilder lessThan(dynamic pValue) {
    param.expression = '<';
    productFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, productFB.parameters, param, SqlSyntax.LessThan,
            productFB._addedBlocks)
        : setCriteria(pValue, productFB.parameters, param,
            SqlSyntax.GreaterThanOrEquals, productFB._addedBlocks);
    _waitingNot = '';
    productFB._addedBlocks.needEndBlock![productFB._blockIndex] =
        productFB._addedBlocks.retVal;
    return productFB;
  }

  ProductFilterBuilder greaterThanOrEquals(dynamic pValue) {
    param.expression = '>=';
    productFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, productFB.parameters, param,
            SqlSyntax.GreaterThanOrEquals, productFB._addedBlocks)
        : setCriteria(pValue, productFB.parameters, param, SqlSyntax.LessThan,
            productFB._addedBlocks);
    _waitingNot = '';
    productFB._addedBlocks.needEndBlock![productFB._blockIndex] =
        productFB._addedBlocks.retVal;
    return productFB;
  }

  ProductFilterBuilder lessThanOrEquals(dynamic pValue) {
    param.expression = '<=';
    productFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, productFB.parameters, param,
            SqlSyntax.LessThanOrEquals, productFB._addedBlocks)
        : setCriteria(pValue, productFB.parameters, param,
            SqlSyntax.GreaterThan, productFB._addedBlocks);
    _waitingNot = '';
    productFB._addedBlocks.needEndBlock![productFB._blockIndex] =
        productFB._addedBlocks.retVal;
    return productFB;
  }

  ProductFilterBuilder inValues(dynamic pValue) {
    productFB._addedBlocks = setCriteria(
        pValue,
        productFB.parameters,
        param,
        SqlSyntax.IN.replaceAll(SqlSyntax.notKeyword, _waitingNot),
        productFB._addedBlocks);
    _waitingNot = '';
    productFB._addedBlocks.needEndBlock![productFB._blockIndex] =
        productFB._addedBlocks.retVal;
    return productFB;
  }
}
// endregion ProductField

// region ProductFilterBuilder
class ProductFilterBuilder extends SearchCriteria {
  ProductFilterBuilder(Product obj) {
    whereString = '';
    groupByList = <String>[];
    _addedBlocks.needEndBlock!.add(false);
    _addedBlocks.waitingStartBlock!.add(false);
    _obj = obj;
  }
  AddedBlocks _addedBlocks = AddedBlocks(<bool>[], <bool>[]);
  int _blockIndex = 0;
  List<DbParameter> parameters = <DbParameter>[];
  List<String> orderByList = <String>[];
  Product? _obj;
  QueryParams qparams = QueryParams();
  int _pagesize = 0;
  int _page = 0;

  /// put the sql keyword 'AND'
  ProductFilterBuilder get and {
    if (parameters.isNotEmpty) {
      parameters[parameters.length - 1].wOperator = ' AND ';
    }
    return this;
  }

  /// put the sql keyword 'OR'
  ProductFilterBuilder get or {
    if (parameters.isNotEmpty) {
      parameters[parameters.length - 1].wOperator = ' OR ';
    }
    return this;
  }

  /// open parentheses
  ProductFilterBuilder get startBlock {
    _addedBlocks.waitingStartBlock!.add(true);
    _addedBlocks.needEndBlock!.add(false);
    _blockIndex++;
    if (_blockIndex > 1) {
      _addedBlocks.needEndBlock![_blockIndex - 1] = true;
    }
    return this;
  }

  /// String whereCriteria, write raw query without 'where' keyword. Like this: 'field1 like 'test%' and field2 = 3'
  ProductFilterBuilder where(String? whereCriteria, {dynamic parameterValue}) {
    if (whereCriteria != null && whereCriteria != '') {
      final DbParameter param = DbParameter(
          columnName: parameterValue == null ? null : '',
          hasParameter: parameterValue != null);
      _addedBlocks = setCriteria(parameterValue ?? 0, parameters, param,
          '($whereCriteria)', _addedBlocks);
      _addedBlocks.needEndBlock![_blockIndex] = _addedBlocks.retVal;
    }
    return this;
  }

  /// page = page number,
  ///
  /// pagesize = row(s) per page
  ProductFilterBuilder page(int page, int pagesize) {
    if (page > 0) {
      _page = page;
    }
    if (pagesize > 0) {
      _pagesize = pagesize;
    }
    return this;
  }

  /// int count = LIMIT
  ProductFilterBuilder top(int count) {
    if (count > 0) {
      _pagesize = count;
    }
    return this;
  }

  /// close parentheses
  ProductFilterBuilder get endBlock {
    if (_addedBlocks.needEndBlock![_blockIndex]) {
      parameters[parameters.length - 1].whereString += ' ) ';
    }
    _addedBlocks.needEndBlock!.removeAt(_blockIndex);
    _addedBlocks.waitingStartBlock!.removeAt(_blockIndex);
    _blockIndex--;
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='name, date'
  ///
  /// Example 2: argFields = ['name', 'date']
  ProductFilterBuilder orderBy(dynamic argFields) {
    if (argFields != null) {
      if (argFields is String) {
        orderByList.add(argFields);
      } else {
        for (String? s in argFields as List<String?>) {
          if (s!.isNotEmpty) {
            orderByList.add(' $s ');
          }
        }
      }
    }
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='field1, field2'
  ///
  /// Example 2: argFields = ['field1', 'field2']
  ProductFilterBuilder orderByDesc(dynamic argFields) {
    if (argFields != null) {
      if (argFields is String) {
        orderByList.add('$argFields desc ');
      } else {
        for (String? s in argFields as List<String?>) {
          if (s!.isNotEmpty) {
            orderByList.add(' $s desc ');
          }
        }
      }
    }
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='field1, field2'
  ///
  /// Example 2: argFields = ['field1', 'field2']
  ProductFilterBuilder groupBy(dynamic argFields) {
    if (argFields != null) {
      if (argFields is String) {
        groupByList.add(' $argFields ');
      } else {
        for (String? s in argFields as List<String?>) {
          if (s!.isNotEmpty) {
            groupByList.add(' $s ');
          }
        }
      }
    }
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='name, date'
  ///
  /// Example 2: argFields = ['name', 'date']
  ProductFilterBuilder having(dynamic argFields) {
    if (argFields != null) {
      if (argFields is String) {
        havingList.add(argFields);
      } else {
        for (String? s in argFields as List<String?>) {
          if (s!.isNotEmpty) {
            havingList.add(' $s ');
          }
        }
      }
    }
    return this;
  }

  ProductField setField(ProductField? field, String colName, DbType dbtype) {
    return ProductField(this)
      ..param = DbParameter(
          dbType: dbtype,
          columnName: colName,
          wStartBlock: _addedBlocks.waitingStartBlock![_blockIndex]);
  }

  ProductField? _id;
  ProductField get id {
    return _id = setField(_id, 'id', DbType.integer);
  }

  ProductField? _name;
  ProductField get name {
    return _name = setField(_name, 'name', DbType.text);
  }

  ProductField? _isActive;
  ProductField get isActive {
    return _isActive = setField(_isActive, 'isActive', DbType.bool);
  }

  ProductField? _recentlyUsed;
  ProductField get recentlyUsed {
    return _recentlyUsed =
        setField(_recentlyUsed, 'recentlyUsed', DbType.datetimeUtc);
  }

  ProductField? _createdDate;
  ProductField get createdDate {
    return _createdDate =
        setField(_createdDate, 'createdDate', DbType.datetimeUtc);
  }

  ProductField? _favorite;
  ProductField get favorite {
    return _favorite = setField(_favorite, 'favorite', DbType.bool);
  }

  ProductField? _isDeleted;
  ProductField get isDeleted {
    return _isDeleted = setField(_isDeleted, 'isDeleted', DbType.bool);
  }

  bool _getIsDeleted = false;

  void _buildParameters() {
    if (_page > 0 && _pagesize > 0) {
      qparams
        ..limit = _pagesize
        ..offset = (_page - 1) * _pagesize;
    } else {
      qparams
        ..limit = _pagesize
        ..offset = _page;
    }
    for (DbParameter param in parameters) {
      if (param.columnName != null) {
        if (param.value is List && !param.hasParameter) {
          param.value = param.dbType == DbType.text || param.value[0] is String
              ? '\'${param.value.join('\',\'')}\''
              : param.value.join(',');
          whereString += param.whereString
              .replaceAll('{field}', param.columnName!)
              .replaceAll('?', param.value.toString());
          param.value = null;
        } else {
          if (param.value is Map<String, dynamic> &&
              param.value['sql'] != null) {
            param
              ..whereString = param.whereString
                  .replaceAll('?', param.value['sql'].toString())
              ..dbType = DbType.integer
              ..value = param.value['args'];
          }
          whereString +=
              param.whereString.replaceAll('{field}', param.columnName!);
        }
        if (!param.whereString.contains('?')) {
        } else {
          switch (param.dbType) {
            case DbType.bool:
              param.value = param.value == null
                  ? null
                  : param.value == true
                      ? 1
                      : 0;
              param.value2 = param.value2 == null
                  ? null
                  : param.value2 == true
                      ? 1
                      : 0;
              break;
            case DbType.date:
            case DbType.datetime:
            case DbType.datetimeUtc:
              param.value = param.value == null
                  ? null
                  : (param.value as DateTime).millisecondsSinceEpoch;
              param.value2 = param.value2 == null
                  ? null
                  : (param.value2 as DateTime).millisecondsSinceEpoch;
              break;
            default:
          }
          if (param.value != null) {
            if (param.value is List) {
              for (var p in param.value) {
                whereArguments.add(p);
              }
            } else {
              whereArguments.add(param.value);
            }
          }
          if (param.value2 != null) {
            whereArguments.add(param.value2);
          }
        }
      } else {
        whereString += param.whereString;
      }
    }
    if (Product._softDeleteActivated) {
      if (whereString != '') {
        whereString =
            '${!_getIsDeleted ? 'ifnull(isDeleted,0)=0 AND' : ''} ($whereString)';
      } else if (!_getIsDeleted) {
        whereString = 'ifnull(isDeleted,0)=0';
      }
    }

    if (whereString != '') {
      qparams.whereString = whereString;
    }
    qparams
      ..whereArguments = whereArguments
      ..groupBy = groupByList.join(',')
      ..orderBy = orderByList.join(',')
      ..having = havingList.join(',');
  }

  /// Deletes List<Product> bulk by query
  ///
  /// <returns>BoolResult res.success=Deleted, not res.success=Can not deleted
  Future<BoolResult> delete([bool hardDelete = false]) async {
    _buildParameters();
    var r = BoolResult(success: false);
    // Delete sub records where in (Item) according to DeleteRule.CASCADE
    final idListItemBYproductId = toListPrimaryKeySQL(false);
    final resItemBYproductId = await Item()
        .select()
        .where('productId IN (${idListItemBYproductId['sql']})',
            parameterValue: idListItemBYproductId['args'])
        .delete(hardDelete);
    if (!resItemBYproductId.success) {
      return resItemBYproductId;
    }

    if (Product._softDeleteActivated && !hardDelete) {
      r = await _obj!._mnProduct.updateBatch(qparams, {'isDeleted': 1});
    } else {
      r = await _obj!._mnProduct.delete(qparams);
    }
    return r;
  }

  /// Recover List<Product> bulk by query
  Future<BoolResult> recover() async {
    _getIsDeleted = true;
    _buildParameters();
    print('SQFENTITIY: recover Product bulk invoked');
    // Recover sub records where in (Item) according to DeleteRule.CASCADE
    final idListItemBYproductId = toListPrimaryKeySQL(false);
    final resItemBYproductId = await Item()
        .select()
        .where('productId IN (${idListItemBYproductId['sql']})',
            parameterValue: idListItemBYproductId['args'])
        .update({'isDeleted': 0});
    if (!resItemBYproductId.success) {
      return resItemBYproductId;
    }
    return _obj!._mnProduct.updateBatch(qparams, {'isDeleted': 0});
  }

  /// using:
  ///
  /// update({'fieldName': Value})
  ///
  /// fieldName must be String. Value is dynamic, it can be any of the (int, bool, String.. )
  Future<BoolResult> update(Map<String, dynamic> values) {
    _buildParameters();
    if (qparams.limit! > 0 || qparams.offset! > 0) {
      qparams.whereString =
          'id IN (SELECT id from product ${qparams.whereString!.isNotEmpty ? 'WHERE ${qparams.whereString}' : ''}${qparams.limit! > 0 ? ' LIMIT ${qparams.limit}' : ''}${qparams.offset! > 0 ? ' OFFSET ${qparams.offset}' : ''})';
    }
    return _obj!._mnProduct.updateBatch(qparams, values);
  }

  /// This method always returns Product Obj if exist, otherwise returns null
  ///
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  ///
  /// ex: toSingle(preload:true) -> Loads all related objects
  ///
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  ///
  /// ex: toSingle(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  ///
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  ///
  /// <returns>List<Product>
  Future<Product?> toSingle(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    _pagesize = 1;
    _buildParameters();
    final objFuture = _obj!._mnProduct.toList(qparams);
    final data = await objFuture;
    Product? obj;
    if (data.isNotEmpty) {
      obj = Product.fromMap(data[0] as Map<String, dynamic>);
      // final List<String> _loadedFields = loadedFields ?? [];

      // RELATIONSHIPS PRELOAD CHILD
      if (preload) {
        loadedFields = loadedFields ?? [];
        if (/*!_loadedfields!.contains('product.plItems') && */ (preloadFields ==
                null ||
            preloadFields.contains('plItems'))) {
          /*_loadedfields!.add('product.plItems'); */ obj.plItems =
              obj.plItems ??
                  await obj.getItems()!.toList(
                      preload: preload,
                      preloadFields: preloadFields,
                      loadParents: false /*, loadedFields:_loadedFields*/);
        }
      } // END RELATIONSHIPS PRELOAD CHILD

    } else {
      obj = null;
    }
    return obj;
  }

  /// This method returns int. [Product]
  ///
  /// <returns>int
  Future<int> toCount([VoidCallback Function(int c)? productCount]) async {
    _buildParameters();
    qparams.selectColumns = ['COUNT(1) AS CNT'];
    final productsFuture = await _obj!._mnProduct.toList(qparams);
    final int count = productsFuture[0]['CNT'] as int;
    if (productCount != null) {
      productCount(count);
    }
    return count;
  }

  /// This method returns List<Product> [Product]
  ///
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  ///
  /// ex: toList(preload:true) -> Loads all related objects
  ///
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  ///
  /// ex: toList(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  ///
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  ///
  /// <returns>List<Product>
  Future<List<Product>> toList(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    final data = await toMapList();
    final List<Product> productsData = await Product.fromMapList(data,
        preload: preload,
        preloadFields: preloadFields,
        loadParents: loadParents,
        loadedFields: loadedFields,
        setDefaultValues: qparams.selectColumns == null);
    return productsData;
  }

  /// This method returns Json String [Product]
  Future<String> toJson() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(o.toMap(forJson: true));
    }
    return json.encode(list);
  }

  /// This method returns Json String. [Product]
  Future<String> toJsonWithChilds() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(await o.toMapWithChildren(false, true));
    }
    return json.encode(list);
  }

  /// This method returns List<dynamic>. [Product]
  ///
  /// <returns>List<dynamic>
  Future<List<dynamic>> toMapList() async {
    _buildParameters();
    return await _obj!._mnProduct.toList(qparams);
  }

  /// This method returns Primary Key List SQL and Parameters retVal = Map<String,dynamic>. [Product]
  ///
  /// retVal['sql'] = SQL statement string, retVal['args'] = whereArguments List<dynamic>;
  ///
  /// <returns>List<String>
  Map<String, dynamic> toListPrimaryKeySQL([bool buildParameters = true]) {
    final Map<String, dynamic> _retVal = <String, dynamic>{};
    if (buildParameters) {
      _buildParameters();
    }
    _retVal['sql'] = 'SELECT `id` FROM product WHERE ${qparams.whereString}';
    _retVal['args'] = qparams.whereArguments;
    return _retVal;
  }

  /// This method returns Primary Key List<int>.
  /// <returns>List<int>
  Future<List<int>> toListPrimaryKey([bool buildParameters = true]) async {
    if (buildParameters) {
      _buildParameters();
    }
    final List<int> idData = <int>[];
    qparams.selectColumns = ['id'];
    final idFuture = await _obj!._mnProduct.toList(qparams);

    final int count = idFuture.length;
    for (int i = 0; i < count; i++) {
      idData.add(idFuture[i]['id'] as int);
    }
    return idData;
  }

  /// Returns List<dynamic> for selected columns. Use this method for 'groupBy' with min,max,avg..  [Product]
  ///
  /// Sample usage: (see EXAMPLE 4.2 at https://github.com/hhtokpinar/sqfEntity#group-by)
  Future<List<dynamic>> toListObject() async {
    _buildParameters();

    final objectFuture = _obj!._mnProduct.toList(qparams);

    final List<dynamic> objectsData = <dynamic>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i]);
    }
    return objectsData;
  }

  /// Returns List<String> for selected first column
  ///
  /// Sample usage: await Product.select(columnsToSelect: ['columnName']).toListString()
  Future<List<String>> toListString(
      [VoidCallback Function(List<String> o)? listString]) async {
    _buildParameters();

    final objectFuture = _obj!._mnProduct.toList(qparams);

    final List<String> objectsData = <String>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i][qparams.selectColumns![0]].toString());
    }
    if (listString != null) {
      listString(objectsData);
    }
    return objectsData;
  }
}
// endregion ProductFilterBuilder

// region ProductFields
class ProductFields {
  static TableField? _fId;
  static TableField get id {
    return _fId = _fId ?? SqlSyntax.setField(_fId, 'id', DbType.integer);
  }

  static TableField? _fName;
  static TableField get name {
    return _fName = _fName ?? SqlSyntax.setField(_fName, 'name', DbType.text);
  }

  static TableField? _fIsActive;
  static TableField get isActive {
    return _fIsActive =
        _fIsActive ?? SqlSyntax.setField(_fIsActive, 'isActive', DbType.bool);
  }

  static TableField? _fRecentlyUsed;
  static TableField get recentlyUsed {
    return _fRecentlyUsed = _fRecentlyUsed ??
        SqlSyntax.setField(_fRecentlyUsed, 'recentlyUsed', DbType.datetimeUtc);
  }

  static TableField? _fCreatedDate;
  static TableField get createdDate {
    return _fCreatedDate = _fCreatedDate ??
        SqlSyntax.setField(_fCreatedDate, 'createdDate', DbType.datetimeUtc);
  }

  static TableField? _fFavorite;
  static TableField get favorite {
    return _fFavorite =
        _fFavorite ?? SqlSyntax.setField(_fFavorite, 'favorite', DbType.bool);
  }

  static TableField? _fIsDeleted;
  static TableField get isDeleted {
    return _fIsDeleted = _fIsDeleted ??
        SqlSyntax.setField(_fIsDeleted, 'isDeleted', DbType.integer);
  }
}
// endregion ProductFields

//region ProductManager
class ProductManager extends SqfEntityProvider {
  ProductManager()
      : super(MyDbModel(),
            tableName: _tableName,
            primaryKeyList: _primaryKeyList,
            whereStr: _whereStr);
  static final String _tableName = 'product';
  static final List<String> _primaryKeyList = ['id'];
  static final String _whereStr = 'id=?';
}

//endregion ProductManager
// region Item
class Item {
  Item(
      {this.id,
      this.description,
      this.price,
      this.quantity,
      this.totalPrice,
      this.sequence,
      this.productId,
      this.datetime,
      this.isDeleted}) {
    _setDefaultValues();
  }
  Item.withFields(this.description, this.price, this.quantity, this.totalPrice,
      this.sequence, this.productId, this.datetime, this.isDeleted) {
    _setDefaultValues();
  }
  Item.withId(
      this.id,
      this.description,
      this.price,
      this.quantity,
      this.totalPrice,
      this.sequence,
      this.productId,
      this.datetime,
      this.isDeleted) {
    _setDefaultValues();
  }
  // fromMap v2.0
  Item.fromMap(Map<String, dynamic> o, {bool setDefaultValues = true}) {
    if (setDefaultValues) {
      _setDefaultValues();
    }
    id = int.tryParse(o['id'].toString());
    if (o['description'] != null) {
      description = o['description'].toString();
    }
    if (o['price'] != null) {
      price = double.tryParse(o['price'].toString());
    }
    if (o['quantity'] != null) {
      quantity = double.tryParse(o['quantity'].toString());
    }
    if (o['totalPrice'] != null) {
      totalPrice = double.tryParse(o['totalPrice'].toString());
    }
    if (o['sequence'] != null) {
      sequence = int.tryParse(o['sequence'].toString());
    }
    productId = int.tryParse(o['productId'].toString());

    if (o['datetime'] != null) {
      datetime = int.tryParse(o['datetime'].toString()) != null
          ? DateTime.fromMillisecondsSinceEpoch(
              int.tryParse(o['datetime'].toString())!)
          : DateTime.tryParse(o['datetime'].toString());
    }
    isDeleted = o['isDeleted'] != null
        ? o['isDeleted'] == 1 || o['isDeleted'] == true
        : null;

    // RELATIONSHIPS FromMAP
    plProduct = o['product'] != null
        ? Product.fromMap(o['product'] as Map<String, dynamic>)
        : null;
    // END RELATIONSHIPS FromMAP
  }
  // FIELDS (Item)
  int? id;
  String? description;
  double? price;
  double? quantity;
  double? totalPrice;
  int? sequence;
  int? productId;
  DateTime? datetime;
  bool? isDeleted;

  BoolResult? saveResult;
  // end FIELDS (Item)

// RELATIONSHIPS (Item)
  /// to load parent of items to this field, use preload parameter ex: toList(preload:true) or toSingle(preload:true) or getById(preload:true)
  /// You can also specify this object into certain preload fields!. Ex: toList(preload:true, preloadFields:['plProduct', 'plField2'..]) or so on..
  Product? plProduct;

  /// get Product By ProductId
  Future<Product?> getProduct(
      {bool loadParents = false, List<String>? loadedFields}) async {
    final _obj = await Product().getById(productId,
        loadParents: loadParents, loadedFields: loadedFields);
    return _obj;
  }
  // END RELATIONSHIPS (Item)

  static const bool _softDeleteActivated = true;
  ItemManager? __mnItem;

  ItemManager get _mnItem {
    return __mnItem = __mnItem ?? ItemManager();
  }

  // METHODS
  Map<String, dynamic> toMap(
      {bool forQuery = false, bool forJson = false, bool forView = false}) {
    final map = <String, dynamic>{};
    if (id != null) {
      map['id'] = id;
    }
    if (description != null) {
      map['description'] = description;
    }

    if (price != null) {
      map['price'] = price;
    }

    if (quantity != null) {
      map['quantity'] = quantity;
    }

    if (totalPrice != null) {
      map['totalPrice'] = totalPrice;
    }

    if (sequence != null) {
      map['sequence'] = sequence;
    }

    if (productId != null) {
      map['productId'] = forView
          ? plProduct == null
              ? productId
              : plProduct!.name
          : productId;
    }

    if (datetime != null) {
      map['datetime'] = forJson
          ? datetime!.toString()
          : forQuery
              ? datetime!.millisecondsSinceEpoch
              : datetime;
    }

    if (isDeleted != null) {
      map['isDeleted'] = forQuery ? (isDeleted! ? 1 : 0) : isDeleted;
    }

    return map;
  }

  Future<Map<String, dynamic>> toMapWithChildren(
      [bool forQuery = false,
      bool forJson = false,
      bool forView = false]) async {
    final map = <String, dynamic>{};
    if (id != null) {
      map['id'] = id;
    }
    if (description != null) {
      map['description'] = description;
    }

    if (price != null) {
      map['price'] = price;
    }

    if (quantity != null) {
      map['quantity'] = quantity;
    }

    if (totalPrice != null) {
      map['totalPrice'] = totalPrice;
    }

    if (sequence != null) {
      map['sequence'] = sequence;
    }

    if (productId != null) {
      map['productId'] = forView
          ? plProduct == null
              ? productId
              : plProduct!.name
          : productId;
    }

    if (datetime != null) {
      map['datetime'] = forJson
          ? datetime!.toString()
          : forQuery
              ? datetime!.millisecondsSinceEpoch
              : datetime;
    }

    if (isDeleted != null) {
      map['isDeleted'] = forQuery ? (isDeleted! ? 1 : 0) : isDeleted;
    }

    return map;
  }

  /// This method returns Json String [Item]
  String toJson() {
    return json.encode(toMap(forJson: true));
  }

  /// This method returns Json String [Item]
  Future<String> toJsonWithChilds() async {
    return json.encode(await toMapWithChildren(false, true));
  }

  List<dynamic> toArgs() {
    return [
      description,
      price,
      quantity,
      totalPrice,
      sequence,
      productId,
      datetime != null ? datetime!.millisecondsSinceEpoch : null,
      isDeleted
    ];
  }

  List<dynamic> toArgsWithIds() {
    return [
      id,
      description,
      price,
      quantity,
      totalPrice,
      sequence,
      productId,
      datetime != null ? datetime!.millisecondsSinceEpoch : null,
      isDeleted
    ];
  }

  static Future<List<Item>?> fromWebUrl(Uri uri,
      {Map<String, String>? headers}) async {
    try {
      final response = await http.get(uri, headers: headers);
      return await fromJson(response.body);
    } catch (e) {
      print('SQFENTITY ERROR Item.fromWebUrl: ErrorMessage: ${e.toString()}');
      return null;
    }
  }

  Future<http.Response> postUrl(Uri uri, {Map<String, String>? headers}) {
    return http.post(uri, headers: headers, body: toJson());
  }

  static Future<List<Item>> fromJson(String jsonBody) async {
    final Iterable list = await json.decode(jsonBody) as Iterable;
    var objList = <Item>[];
    try {
      objList = list
          .map((item) => Item.fromMap(item as Map<String, dynamic>))
          .toList();
    } catch (e) {
      print('SQFENTITY ERROR Item.fromJson: ErrorMessage: ${e.toString()}');
    }
    return objList;
  }

  static Future<List<Item>> fromMapList(List<dynamic> data,
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields,
      bool setDefaultValues = true}) async {
    final List<Item> objList = <Item>[];
    loadedFields = loadedFields ?? [];
    for (final map in data) {
      final obj = Item.fromMap(map as Map<String, dynamic>,
          setDefaultValues: setDefaultValues);
      // final List<String> _loadedFields = List<String>.from(loadedFields);

      // RELATIONSHIPS PRELOAD
      if (preload || loadParents) {
        loadedFields = loadedFields ?? [];
        if (/*!_loadedfields!.contains('product.plProduct') && */ (preloadFields ==
                null ||
            loadParents ||
            preloadFields.contains('plProduct'))) {
          /*_loadedfields!.add('product.plProduct');*/ obj.plProduct = obj
                  .plProduct ??
              await obj.getProduct(
                  loadParents: loadParents /*, loadedFields: _loadedFields*/);
        }
      } // END RELATIONSHIPS PRELOAD

      objList.add(obj);
    }
    return objList;
  }

  /// returns Item by ID if exist, otherwise returns null
  ///
  /// Primary Keys: int? id
  ///
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  ///
  /// ex: getById(preload:true) -> Loads all related objects
  ///
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  ///
  /// ex: getById(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  ///
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  ///
  /// <returns>returns Item if exist, otherwise returns null
  Future<Item?> getById(int? id,
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    if (id == null) {
      return null;
    }
    Item? obj;
    final data = await _mnItem.getById([id]);
    if (data.length != 0) {
      obj = Item.fromMap(data[0] as Map<String, dynamic>);
      // final List<String> _loadedFields = loadedFields ?? [];

      // RELATIONSHIPS PRELOAD
      if (preload || loadParents) {
        loadedFields = loadedFields ?? [];
        if (/*!_loadedfields!.contains('product.plProduct') && */ (preloadFields ==
                null ||
            loadParents ||
            preloadFields.contains('plProduct'))) {
          /*_loadedfields!.add('product.plProduct');*/ obj.plProduct = obj
                  .plProduct ??
              await obj.getProduct(
                  loadParents: loadParents /*, loadedFields: _loadedFields*/);
        }
      } // END RELATIONSHIPS PRELOAD

    } else {
      obj = null;
    }
    return obj;
  }

  /// Saves the (Item) object. If the id field is null, saves as a new record and returns new id, if id is not null then updates record

  /// <returns>Returns id
  Future<int?> save() async {
    if (id == null || id == 0) {
      id = await _mnItem.insert(this);
    } else {
      // id= await _upsert(); // removed in sqfentity_gen 1.3.0+6
      await _mnItem.update(this);
    }

    return id;
  }

  /// saveAs Item. Returns a new Primary Key value of Item

  /// <returns>Returns a new Primary Key value of Item
  Future<int?> saveAs() async {
    id = null;

    return save();
  }

  /// saveAll method saves the sent List<Item> as a bulk in one transaction
  ///
  /// Returns a <List<BoolResult>>
  static Future<List<dynamic>> saveAll(List<Item> items) async {
    // final results = _mnItem.saveAll('INSERT OR REPLACE INTO items (id,description, price, quantity, totalPrice, sequence, productId, datetime,isDeleted)  VALUES (?,?,?,?,?,?,?,?,?)',items);
    // return results; removed in sqfentity_gen 1.3.0+6
    await MyDbModel().batchStart();
    for (final obj in items) {
      await obj.save();
    }
    //    return MyDbModel().batchCommit();
    final result = await MyDbModel().batchCommit();
    for (int i = 0; i < items.length; i++) {
      if (items[i].id == null) {
        items[i].id = result![i] as int;
      }
    }

    return result!;
  }

  /// Updates if the record exists, otherwise adds a new row

  /// <returns>Returns id

  Future<int?> upsert() async {
    try {
      final result = await _mnItem.rawInsert(
          'INSERT OR REPLACE INTO items (id,description, price, quantity, totalPrice, sequence, productId, datetime,isDeleted)  VALUES (?,?,?,?,?,?,?,?,?)',
          [
            id,
            description,
            price,
            quantity,
            totalPrice,
            sequence,
            productId,
            datetime != null ? datetime!.millisecondsSinceEpoch : null,
            isDeleted
          ]);
      if (result! > 0) {
        saveResult = BoolResult(
            success: true, successMessage: 'Item id=$id updated successfully');
      } else {
        saveResult = BoolResult(
            success: false, errorMessage: 'Item id=$id did not update');
      }
      return id;
    } catch (e) {
      saveResult = BoolResult(
          success: false,
          errorMessage: 'Item Save failed. Error: ${e.toString()}');
      return null;
    }
  }

  /// inserts or replaces the sent List<<Item>> as a bulk in one transaction.
  ///
  /// upsertAll() method is faster then saveAll() method. upsertAll() should be used when you are sure that the primary key is greater than zero
  ///
  /// Returns a BoolCommitResult
  Future<BoolCommitResult> upsertAll(List<Item> items) async {
    final results = await _mnItem.rawInsertAll(
        'INSERT OR REPLACE INTO items (id,description, price, quantity, totalPrice, sequence, productId, datetime,isDeleted)  VALUES (?,?,?,?,?,?,?,?,?)',
        items);
    return results;
  }

  /// Deletes Item

  /// <returns>BoolResult res.success=Deleted, not res.success=Can not deleted

  Future<BoolResult> delete([bool hardDelete = false]) async {
    print('SQFENTITIY: delete Item invoked (id=$id)');
    if (!_softDeleteActivated || hardDelete || isDeleted!) {
      return _mnItem
          .delete(QueryParams(whereString: 'id=?', whereArguments: [id]));
    } else {
      return _mnItem.updateBatch(
          QueryParams(whereString: 'id=?', whereArguments: [id]),
          {'isDeleted': 1});
    }
  }

  /// Recover Item>

  /// <returns>BoolResult res.success=Recovered, not res.success=Can not recovered
  Future<BoolResult> recover([bool recoverChilds = true]) async {
    print('SQFENTITIY: recover Item invoked (id=$id)');
    {
      return _mnItem.updateBatch(
          QueryParams(whereString: 'id=?', whereArguments: [id]),
          {'isDeleted': 0});
    }
  }

  ItemFilterBuilder select(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    return ItemFilterBuilder(this)
      .._getIsDeleted = getIsDeleted == true
      ..qparams.selectColumns = columnsToSelect;
  }

  ItemFilterBuilder distinct(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    return ItemFilterBuilder(this)
      .._getIsDeleted = getIsDeleted == true
      ..qparams.selectColumns = columnsToSelect
      ..qparams.distinct = true;
  }

  void _setDefaultValues() {
    price = price ?? 0;
    quantity = quantity ?? 0;
    totalPrice = totalPrice ?? 0;
    productId = productId ?? 1;
    datetime = datetime ?? DateTime.now();
    isDeleted = isDeleted ?? false;
  }
  // END METHODS
  // BEGIN CUSTOM CODE
  /*
      you can define customCode property of your SqfEntityTable constant. For example:
      const tablePerson = SqfEntityTable(
      tableName: 'person',
      primaryKeyName: 'id',
      primaryKeyType: PrimaryKeyType.integer_auto_incremental,
      fields: [
        SqfEntityField('firstName', DbType.text),
        SqfEntityField('lastName', DbType.text),
      ],
      customCode: '''
       String fullName()
       { 
         return '$firstName $lastName';
       }
      ''');
     */
  // END CUSTOM CODE
}
// endregion item

// region ItemField
class ItemField extends SearchCriteria {
  ItemField(this.itemFB);
  // { param = DbParameter(); }
  DbParameter param = DbParameter();
  String _waitingNot = '';
  ItemFilterBuilder itemFB;

  ItemField get not {
    _waitingNot = ' NOT ';
    return this;
  }

  ItemFilterBuilder equals(dynamic pValue) {
    param.expression = '=';
    itemFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, itemFB.parameters, param, SqlSyntax.EQuals,
            itemFB._addedBlocks)
        : setCriteria(pValue, itemFB.parameters, param, SqlSyntax.NotEQuals,
            itemFB._addedBlocks);
    _waitingNot = '';
    itemFB._addedBlocks.needEndBlock![itemFB._blockIndex] =
        itemFB._addedBlocks.retVal;
    return itemFB;
  }

  ItemFilterBuilder equalsOrNull(dynamic pValue) {
    param.expression = '=';
    itemFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, itemFB.parameters, param, SqlSyntax.EQualsOrNull,
            itemFB._addedBlocks)
        : setCriteria(pValue, itemFB.parameters, param,
            SqlSyntax.NotEQualsOrNull, itemFB._addedBlocks);
    _waitingNot = '';
    itemFB._addedBlocks.needEndBlock![itemFB._blockIndex] =
        itemFB._addedBlocks.retVal;
    return itemFB;
  }

  ItemFilterBuilder isNull() {
    itemFB._addedBlocks = setCriteria(
        0,
        itemFB.parameters,
        param,
        SqlSyntax.IsNULL.replaceAll(SqlSyntax.notKeyword, _waitingNot),
        itemFB._addedBlocks);
    _waitingNot = '';
    itemFB._addedBlocks.needEndBlock![itemFB._blockIndex] =
        itemFB._addedBlocks.retVal;
    return itemFB;
  }

  ItemFilterBuilder contains(dynamic pValue) {
    if (pValue != null) {
      itemFB._addedBlocks = setCriteria(
          '%${pValue.toString()}%',
          itemFB.parameters,
          param,
          SqlSyntax.Contains.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          itemFB._addedBlocks);
      _waitingNot = '';
      itemFB._addedBlocks.needEndBlock![itemFB._blockIndex] =
          itemFB._addedBlocks.retVal;
    }
    return itemFB;
  }

  ItemFilterBuilder startsWith(dynamic pValue) {
    if (pValue != null) {
      itemFB._addedBlocks = setCriteria(
          '${pValue.toString()}%',
          itemFB.parameters,
          param,
          SqlSyntax.Contains.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          itemFB._addedBlocks);
      _waitingNot = '';
      itemFB._addedBlocks.needEndBlock![itemFB._blockIndex] =
          itemFB._addedBlocks.retVal;
      itemFB._addedBlocks.needEndBlock![itemFB._blockIndex] =
          itemFB._addedBlocks.retVal;
    }
    return itemFB;
  }

  ItemFilterBuilder endsWith(dynamic pValue) {
    if (pValue != null) {
      itemFB._addedBlocks = setCriteria(
          '%${pValue.toString()}',
          itemFB.parameters,
          param,
          SqlSyntax.Contains.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          itemFB._addedBlocks);
      _waitingNot = '';
      itemFB._addedBlocks.needEndBlock![itemFB._blockIndex] =
          itemFB._addedBlocks.retVal;
    }
    return itemFB;
  }

  ItemFilterBuilder between(dynamic pFirst, dynamic pLast) {
    if (pFirst != null && pLast != null) {
      itemFB._addedBlocks = setCriteria(
          pFirst,
          itemFB.parameters,
          param,
          SqlSyntax.Between.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          itemFB._addedBlocks,
          pLast);
    } else if (pFirst != null) {
      if (_waitingNot != '') {
        itemFB._addedBlocks = setCriteria(pFirst, itemFB.parameters, param,
            SqlSyntax.LessThan, itemFB._addedBlocks);
      } else {
        itemFB._addedBlocks = setCriteria(pFirst, itemFB.parameters, param,
            SqlSyntax.GreaterThanOrEquals, itemFB._addedBlocks);
      }
    } else if (pLast != null) {
      if (_waitingNot != '') {
        itemFB._addedBlocks = setCriteria(pLast, itemFB.parameters, param,
            SqlSyntax.GreaterThan, itemFB._addedBlocks);
      } else {
        itemFB._addedBlocks = setCriteria(pLast, itemFB.parameters, param,
            SqlSyntax.LessThanOrEquals, itemFB._addedBlocks);
      }
    }
    _waitingNot = '';
    itemFB._addedBlocks.needEndBlock![itemFB._blockIndex] =
        itemFB._addedBlocks.retVal;
    return itemFB;
  }

  ItemFilterBuilder greaterThan(dynamic pValue) {
    param.expression = '>';
    itemFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, itemFB.parameters, param, SqlSyntax.GreaterThan,
            itemFB._addedBlocks)
        : setCriteria(pValue, itemFB.parameters, param,
            SqlSyntax.LessThanOrEquals, itemFB._addedBlocks);
    _waitingNot = '';
    itemFB._addedBlocks.needEndBlock![itemFB._blockIndex] =
        itemFB._addedBlocks.retVal;
    return itemFB;
  }

  ItemFilterBuilder lessThan(dynamic pValue) {
    param.expression = '<';
    itemFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, itemFB.parameters, param, SqlSyntax.LessThan,
            itemFB._addedBlocks)
        : setCriteria(pValue, itemFB.parameters, param,
            SqlSyntax.GreaterThanOrEquals, itemFB._addedBlocks);
    _waitingNot = '';
    itemFB._addedBlocks.needEndBlock![itemFB._blockIndex] =
        itemFB._addedBlocks.retVal;
    return itemFB;
  }

  ItemFilterBuilder greaterThanOrEquals(dynamic pValue) {
    param.expression = '>=';
    itemFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, itemFB.parameters, param,
            SqlSyntax.GreaterThanOrEquals, itemFB._addedBlocks)
        : setCriteria(pValue, itemFB.parameters, param, SqlSyntax.LessThan,
            itemFB._addedBlocks);
    _waitingNot = '';
    itemFB._addedBlocks.needEndBlock![itemFB._blockIndex] =
        itemFB._addedBlocks.retVal;
    return itemFB;
  }

  ItemFilterBuilder lessThanOrEquals(dynamic pValue) {
    param.expression = '<=';
    itemFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, itemFB.parameters, param,
            SqlSyntax.LessThanOrEquals, itemFB._addedBlocks)
        : setCriteria(pValue, itemFB.parameters, param, SqlSyntax.GreaterThan,
            itemFB._addedBlocks);
    _waitingNot = '';
    itemFB._addedBlocks.needEndBlock![itemFB._blockIndex] =
        itemFB._addedBlocks.retVal;
    return itemFB;
  }

  ItemFilterBuilder inValues(dynamic pValue) {
    itemFB._addedBlocks = setCriteria(
        pValue,
        itemFB.parameters,
        param,
        SqlSyntax.IN.replaceAll(SqlSyntax.notKeyword, _waitingNot),
        itemFB._addedBlocks);
    _waitingNot = '';
    itemFB._addedBlocks.needEndBlock![itemFB._blockIndex] =
        itemFB._addedBlocks.retVal;
    return itemFB;
  }
}
// endregion ItemField

// region ItemFilterBuilder
class ItemFilterBuilder extends SearchCriteria {
  ItemFilterBuilder(Item obj) {
    whereString = '';
    groupByList = <String>[];
    _addedBlocks.needEndBlock!.add(false);
    _addedBlocks.waitingStartBlock!.add(false);
    _obj = obj;
  }
  AddedBlocks _addedBlocks = AddedBlocks(<bool>[], <bool>[]);
  int _blockIndex = 0;
  List<DbParameter> parameters = <DbParameter>[];
  List<String> orderByList = <String>[];
  Item? _obj;
  QueryParams qparams = QueryParams();
  int _pagesize = 0;
  int _page = 0;

  /// put the sql keyword 'AND'
  ItemFilterBuilder get and {
    if (parameters.isNotEmpty) {
      parameters[parameters.length - 1].wOperator = ' AND ';
    }
    return this;
  }

  /// put the sql keyword 'OR'
  ItemFilterBuilder get or {
    if (parameters.isNotEmpty) {
      parameters[parameters.length - 1].wOperator = ' OR ';
    }
    return this;
  }

  /// open parentheses
  ItemFilterBuilder get startBlock {
    _addedBlocks.waitingStartBlock!.add(true);
    _addedBlocks.needEndBlock!.add(false);
    _blockIndex++;
    if (_blockIndex > 1) {
      _addedBlocks.needEndBlock![_blockIndex - 1] = true;
    }
    return this;
  }

  /// String whereCriteria, write raw query without 'where' keyword. Like this: 'field1 like 'test%' and field2 = 3'
  ItemFilterBuilder where(String? whereCriteria, {dynamic parameterValue}) {
    if (whereCriteria != null && whereCriteria != '') {
      final DbParameter param = DbParameter(
          columnName: parameterValue == null ? null : '',
          hasParameter: parameterValue != null);
      _addedBlocks = setCriteria(parameterValue ?? 0, parameters, param,
          '($whereCriteria)', _addedBlocks);
      _addedBlocks.needEndBlock![_blockIndex] = _addedBlocks.retVal;
    }
    return this;
  }

  /// page = page number,
  ///
  /// pagesize = row(s) per page
  ItemFilterBuilder page(int page, int pagesize) {
    if (page > 0) {
      _page = page;
    }
    if (pagesize > 0) {
      _pagesize = pagesize;
    }
    return this;
  }

  /// int count = LIMIT
  ItemFilterBuilder top(int count) {
    if (count > 0) {
      _pagesize = count;
    }
    return this;
  }

  /// close parentheses
  ItemFilterBuilder get endBlock {
    if (_addedBlocks.needEndBlock![_blockIndex]) {
      parameters[parameters.length - 1].whereString += ' ) ';
    }
    _addedBlocks.needEndBlock!.removeAt(_blockIndex);
    _addedBlocks.waitingStartBlock!.removeAt(_blockIndex);
    _blockIndex--;
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='name, date'
  ///
  /// Example 2: argFields = ['name', 'date']
  ItemFilterBuilder orderBy(dynamic argFields) {
    if (argFields != null) {
      if (argFields is String) {
        orderByList.add(argFields);
      } else {
        for (String? s in argFields as List<String?>) {
          if (s!.isNotEmpty) {
            orderByList.add(' $s ');
          }
        }
      }
    }
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='field1, field2'
  ///
  /// Example 2: argFields = ['field1', 'field2']
  ItemFilterBuilder orderByDesc(dynamic argFields) {
    if (argFields != null) {
      if (argFields is String) {
        orderByList.add('$argFields desc ');
      } else {
        for (String? s in argFields as List<String?>) {
          if (s!.isNotEmpty) {
            orderByList.add(' $s desc ');
          }
        }
      }
    }
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='field1, field2'
  ///
  /// Example 2: argFields = ['field1', 'field2']
  ItemFilterBuilder groupBy(dynamic argFields) {
    if (argFields != null) {
      if (argFields is String) {
        groupByList.add(' $argFields ');
      } else {
        for (String? s in argFields as List<String?>) {
          if (s!.isNotEmpty) {
            groupByList.add(' $s ');
          }
        }
      }
    }
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='name, date'
  ///
  /// Example 2: argFields = ['name', 'date']
  ItemFilterBuilder having(dynamic argFields) {
    if (argFields != null) {
      if (argFields is String) {
        havingList.add(argFields);
      } else {
        for (String? s in argFields as List<String?>) {
          if (s!.isNotEmpty) {
            havingList.add(' $s ');
          }
        }
      }
    }
    return this;
  }

  ItemField setField(ItemField? field, String colName, DbType dbtype) {
    return ItemField(this)
      ..param = DbParameter(
          dbType: dbtype,
          columnName: colName,
          wStartBlock: _addedBlocks.waitingStartBlock![_blockIndex]);
  }

  ItemField? _id;
  ItemField get id {
    return _id = setField(_id, 'id', DbType.integer);
  }

  ItemField? _description;
  ItemField get description {
    return _description = setField(_description, 'description', DbType.text);
  }

  ItemField? _price;
  ItemField get price {
    return _price = setField(_price, 'price', DbType.real);
  }

  ItemField? _quantity;
  ItemField get quantity {
    return _quantity = setField(_quantity, 'quantity', DbType.real);
  }

  ItemField? _totalPrice;
  ItemField get totalPrice {
    return _totalPrice = setField(_totalPrice, 'totalPrice', DbType.real);
  }

  ItemField? _sequence;
  ItemField get sequence {
    return _sequence = setField(_sequence, 'sequence', DbType.integer);
  }

  ItemField? _productId;
  ItemField get productId {
    return _productId = setField(_productId, 'productId', DbType.integer);
  }

  ItemField? _datetime;
  ItemField get datetime {
    return _datetime = setField(_datetime, 'datetime', DbType.datetime);
  }

  ItemField? _isDeleted;
  ItemField get isDeleted {
    return _isDeleted = setField(_isDeleted, 'isDeleted', DbType.bool);
  }

  bool _getIsDeleted = false;

  void _buildParameters() {
    if (_page > 0 && _pagesize > 0) {
      qparams
        ..limit = _pagesize
        ..offset = (_page - 1) * _pagesize;
    } else {
      qparams
        ..limit = _pagesize
        ..offset = _page;
    }
    for (DbParameter param in parameters) {
      if (param.columnName != null) {
        if (param.value is List && !param.hasParameter) {
          param.value = param.dbType == DbType.text || param.value[0] is String
              ? '\'${param.value.join('\',\'')}\''
              : param.value.join(',');
          whereString += param.whereString
              .replaceAll('{field}', param.columnName!)
              .replaceAll('?', param.value.toString());
          param.value = null;
        } else {
          if (param.value is Map<String, dynamic> &&
              param.value['sql'] != null) {
            param
              ..whereString = param.whereString
                  .replaceAll('?', param.value['sql'].toString())
              ..dbType = DbType.integer
              ..value = param.value['args'];
          }
          whereString +=
              param.whereString.replaceAll('{field}', param.columnName!);
        }
        if (!param.whereString.contains('?')) {
        } else {
          switch (param.dbType) {
            case DbType.bool:
              param.value = param.value == null
                  ? null
                  : param.value == true
                      ? 1
                      : 0;
              param.value2 = param.value2 == null
                  ? null
                  : param.value2 == true
                      ? 1
                      : 0;
              break;
            case DbType.date:
            case DbType.datetime:
            case DbType.datetimeUtc:
              param.value = param.value == null
                  ? null
                  : (param.value as DateTime).millisecondsSinceEpoch;
              param.value2 = param.value2 == null
                  ? null
                  : (param.value2 as DateTime).millisecondsSinceEpoch;
              break;
            default:
          }
          if (param.value != null) {
            if (param.value is List) {
              for (var p in param.value) {
                whereArguments.add(p);
              }
            } else {
              whereArguments.add(param.value);
            }
          }
          if (param.value2 != null) {
            whereArguments.add(param.value2);
          }
        }
      } else {
        whereString += param.whereString;
      }
    }
    if (Item._softDeleteActivated) {
      if (whereString != '') {
        whereString =
            '${!_getIsDeleted ? 'ifnull(isDeleted,0)=0 AND' : ''} ($whereString)';
      } else if (!_getIsDeleted) {
        whereString = 'ifnull(isDeleted,0)=0';
      }
    }

    if (whereString != '') {
      qparams.whereString = whereString;
    }
    qparams
      ..whereArguments = whereArguments
      ..groupBy = groupByList.join(',')
      ..orderBy = orderByList.join(',')
      ..having = havingList.join(',');
  }

  /// Deletes List<Item> bulk by query
  ///
  /// <returns>BoolResult res.success=Deleted, not res.success=Can not deleted
  Future<BoolResult> delete([bool hardDelete = false]) async {
    _buildParameters();
    var r = BoolResult(success: false);

    if (Item._softDeleteActivated && !hardDelete) {
      r = await _obj!._mnItem.updateBatch(qparams, {'isDeleted': 1});
    } else {
      r = await _obj!._mnItem.delete(qparams);
    }
    return r;
  }

  /// Recover List<Item> bulk by query
  Future<BoolResult> recover() async {
    _getIsDeleted = true;
    _buildParameters();
    print('SQFENTITIY: recover Item bulk invoked');
    return _obj!._mnItem.updateBatch(qparams, {'isDeleted': 0});
  }

  /// using:
  ///
  /// update({'fieldName': Value})
  ///
  /// fieldName must be String. Value is dynamic, it can be any of the (int, bool, String.. )
  Future<BoolResult> update(Map<String, dynamic> values) {
    _buildParameters();
    if (qparams.limit! > 0 || qparams.offset! > 0) {
      qparams.whereString =
          'id IN (SELECT id from items ${qparams.whereString!.isNotEmpty ? 'WHERE ${qparams.whereString}' : ''}${qparams.limit! > 0 ? ' LIMIT ${qparams.limit}' : ''}${qparams.offset! > 0 ? ' OFFSET ${qparams.offset}' : ''})';
    }
    return _obj!._mnItem.updateBatch(qparams, values);
  }

  /// This method always returns Item Obj if exist, otherwise returns null
  ///
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  ///
  /// ex: toSingle(preload:true) -> Loads all related objects
  ///
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  ///
  /// ex: toSingle(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  ///
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  ///
  /// <returns>List<Item>
  Future<Item?> toSingle(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    _pagesize = 1;
    _buildParameters();
    final objFuture = _obj!._mnItem.toList(qparams);
    final data = await objFuture;
    Item? obj;
    if (data.isNotEmpty) {
      obj = Item.fromMap(data[0] as Map<String, dynamic>);
      // final List<String> _loadedFields = loadedFields ?? [];

      // RELATIONSHIPS PRELOAD
      if (preload || loadParents) {
        loadedFields = loadedFields ?? [];
        if (/*!_loadedfields!.contains('product.plProduct') && */ (preloadFields ==
                null ||
            loadParents ||
            preloadFields.contains('plProduct'))) {
          /*_loadedfields!.add('product.plProduct');*/ obj.plProduct = obj
                  .plProduct ??
              await obj.getProduct(
                  loadParents: loadParents /*, loadedFields: _loadedFields*/);
        }
      } // END RELATIONSHIPS PRELOAD

    } else {
      obj = null;
    }
    return obj;
  }

  /// This method returns int. [Item]
  ///
  /// <returns>int
  Future<int> toCount([VoidCallback Function(int c)? itemCount]) async {
    _buildParameters();
    qparams.selectColumns = ['COUNT(1) AS CNT'];
    final itemsFuture = await _obj!._mnItem.toList(qparams);
    final int count = itemsFuture[0]['CNT'] as int;
    if (itemCount != null) {
      itemCount(count);
    }
    return count;
  }

  /// This method returns List<Item> [Item]
  ///
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  ///
  /// ex: toList(preload:true) -> Loads all related objects
  ///
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  ///
  /// ex: toList(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  ///
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  ///
  /// <returns>List<Item>
  Future<List<Item>> toList(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    final data = await toMapList();
    final List<Item> itemsData = await Item.fromMapList(data,
        preload: preload,
        preloadFields: preloadFields,
        loadParents: loadParents,
        loadedFields: loadedFields,
        setDefaultValues: qparams.selectColumns == null);
    return itemsData;
  }

  /// This method returns Json String [Item]
  Future<String> toJson() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(o.toMap(forJson: true));
    }
    return json.encode(list);
  }

  /// This method returns Json String. [Item]
  Future<String> toJsonWithChilds() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(await o.toMapWithChildren(false, true));
    }
    return json.encode(list);
  }

  /// This method returns List<dynamic>. [Item]
  ///
  /// <returns>List<dynamic>
  Future<List<dynamic>> toMapList() async {
    _buildParameters();
    return await _obj!._mnItem.toList(qparams);
  }

  /// This method returns Primary Key List SQL and Parameters retVal = Map<String,dynamic>. [Item]
  ///
  /// retVal['sql'] = SQL statement string, retVal['args'] = whereArguments List<dynamic>;
  ///
  /// <returns>List<String>
  Map<String, dynamic> toListPrimaryKeySQL([bool buildParameters = true]) {
    final Map<String, dynamic> _retVal = <String, dynamic>{};
    if (buildParameters) {
      _buildParameters();
    }
    _retVal['sql'] = 'SELECT `id` FROM items WHERE ${qparams.whereString}';
    _retVal['args'] = qparams.whereArguments;
    return _retVal;
  }

  /// This method returns Primary Key List<int>.
  /// <returns>List<int>
  Future<List<int>> toListPrimaryKey([bool buildParameters = true]) async {
    if (buildParameters) {
      _buildParameters();
    }
    final List<int> idData = <int>[];
    qparams.selectColumns = ['id'];
    final idFuture = await _obj!._mnItem.toList(qparams);

    final int count = idFuture.length;
    for (int i = 0; i < count; i++) {
      idData.add(idFuture[i]['id'] as int);
    }
    return idData;
  }

  /// Returns List<dynamic> for selected columns. Use this method for 'groupBy' with min,max,avg..  [Item]
  ///
  /// Sample usage: (see EXAMPLE 4.2 at https://github.com/hhtokpinar/sqfEntity#group-by)
  Future<List<dynamic>> toListObject() async {
    _buildParameters();

    final objectFuture = _obj!._mnItem.toList(qparams);

    final List<dynamic> objectsData = <dynamic>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i]);
    }
    return objectsData;
  }

  /// Returns List<String> for selected first column
  ///
  /// Sample usage: await Item.select(columnsToSelect: ['columnName']).toListString()
  Future<List<String>> toListString(
      [VoidCallback Function(List<String> o)? listString]) async {
    _buildParameters();

    final objectFuture = _obj!._mnItem.toList(qparams);

    final List<String> objectsData = <String>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i][qparams.selectColumns![0]].toString());
    }
    if (listString != null) {
      listString(objectsData);
    }
    return objectsData;
  }
}
// endregion ItemFilterBuilder

// region ItemFields
class ItemFields {
  static TableField? _fId;
  static TableField get id {
    return _fId = _fId ?? SqlSyntax.setField(_fId, 'id', DbType.integer);
  }

  static TableField? _fDescription;
  static TableField get description {
    return _fDescription = _fDescription ??
        SqlSyntax.setField(_fDescription, 'description', DbType.text);
  }

  static TableField? _fPrice;
  static TableField get price {
    return _fPrice =
        _fPrice ?? SqlSyntax.setField(_fPrice, 'price', DbType.real);
  }

  static TableField? _fQuantity;
  static TableField get quantity {
    return _fQuantity =
        _fQuantity ?? SqlSyntax.setField(_fQuantity, 'quantity', DbType.real);
  }

  static TableField? _fTotalPrice;
  static TableField get totalPrice {
    return _fTotalPrice = _fTotalPrice ??
        SqlSyntax.setField(_fTotalPrice, 'totalPrice', DbType.real);
  }

  static TableField? _fSequence;
  static TableField get sequence {
    return _fSequence = _fSequence ??
        SqlSyntax.setField(_fSequence, 'sequence', DbType.integer);
  }

  static TableField? _fProductId;
  static TableField get productId {
    return _fProductId = _fProductId ??
        SqlSyntax.setField(_fProductId, 'productId', DbType.integer);
  }

  static TableField? _fDatetime;
  static TableField get datetime {
    return _fDatetime = _fDatetime ??
        SqlSyntax.setField(_fDatetime, 'datetime', DbType.datetime);
  }

  static TableField? _fIsDeleted;
  static TableField get isDeleted {
    return _fIsDeleted = _fIsDeleted ??
        SqlSyntax.setField(_fIsDeleted, 'isDeleted', DbType.integer);
  }
}
// endregion ItemFields

//region ItemManager
class ItemManager extends SqfEntityProvider {
  ItemManager()
      : super(MyDbModel(),
            tableName: _tableName,
            primaryKeyList: _primaryKeyList,
            whereStr: _whereStr);
  static final String _tableName = 'items';
  static final List<String> _primaryKeyList = ['id'];
  static final String _whereStr = 'id=?';
}

//endregion ItemManager
// region Company
class Company {
  Company(
      {this.id,
      this.companyName,
      this.addressLine1,
      this.addressLine2,
      this.mobile,
      this.email,
      this.currency,
      this.logoUrl,
      this.updated,
      this.createdDate,
      this.isDeleted}) {
    _setDefaultValues();
  }
  Company.withFields(
      this.companyName,
      this.addressLine1,
      this.addressLine2,
      this.mobile,
      this.email,
      this.currency,
      this.logoUrl,
      this.updated,
      this.createdDate,
      this.isDeleted) {
    _setDefaultValues();
  }
  Company.withId(
      this.id,
      this.companyName,
      this.addressLine1,
      this.addressLine2,
      this.mobile,
      this.email,
      this.currency,
      this.logoUrl,
      this.updated,
      this.createdDate,
      this.isDeleted) {
    _setDefaultValues();
  }
  // fromMap v2.0
  Company.fromMap(Map<String, dynamic> o, {bool setDefaultValues = true}) {
    if (setDefaultValues) {
      _setDefaultValues();
    }
    id = int.tryParse(o['id'].toString());
    if (o['companyName'] != null) {
      companyName = o['companyName'].toString();
    }
    if (o['addressLine1'] != null) {
      addressLine1 = o['addressLine1'].toString();
    }
    if (o['addressLine2'] != null) {
      addressLine2 = o['addressLine2'].toString();
    }
    if (o['mobile'] != null) {
      mobile = o['mobile'].toString();
    }
    if (o['email'] != null) {
      email = o['email'].toString();
    }
    if (o['currency'] != null) {
      currency = o['currency'].toString();
    }
    if (o['logoUrl'] != null) {
      logoUrl = o['logoUrl'].toString();
    }
    if (o['updated'] != null) {
      updated = int.tryParse(o['updated'].toString()) != null
          ? DateTime.fromMillisecondsSinceEpoch(
              int.tryParse(o['updated'].toString())!,
              isUtc: true)
          : DateTime.tryParse(o['updated'].toString());
    }
    if (o['createdDate'] != null) {
      createdDate = int.tryParse(o['createdDate'].toString()) != null
          ? DateTime.fromMillisecondsSinceEpoch(
              int.tryParse(o['createdDate'].toString())!,
              isUtc: true)
          : DateTime.tryParse(o['createdDate'].toString());
    }
    isDeleted = o['isDeleted'] != null
        ? o['isDeleted'] == 1 || o['isDeleted'] == true
        : null;
  }
  // FIELDS (Company)
  int? id;
  String? companyName;
  String? addressLine1;
  String? addressLine2;
  String? mobile;
  String? email;
  String? currency;
  String? logoUrl;
  DateTime? updated;
  DateTime? createdDate;
  bool? isDeleted;

  BoolResult? saveResult;
  // end FIELDS (Company)

  static const bool _softDeleteActivated = true;
  CompanyManager? __mnCompany;

  CompanyManager get _mnCompany {
    return __mnCompany = __mnCompany ?? CompanyManager();
  }

  // METHODS
  Map<String, dynamic> toMap(
      {bool forQuery = false, bool forJson = false, bool forView = false}) {
    final map = <String, dynamic>{};
    if (id != null) {
      map['id'] = id;
    }
    if (companyName != null) {
      map['companyName'] = companyName;
    }

    if (addressLine1 != null) {
      map['addressLine1'] = addressLine1;
    }

    if (addressLine2 != null) {
      map['addressLine2'] = addressLine2;
    }

    if (mobile != null) {
      map['mobile'] = mobile;
    }

    if (email != null) {
      map['email'] = email;
    }

    if (currency != null) {
      map['currency'] = currency;
    }

    if (logoUrl != null) {
      map['logoUrl'] = logoUrl;
    }

    if (updated != null) {
      map['updated'] = forJson
          ? updated!.toUtc().toString()
          : forQuery
              ? updated!.millisecondsSinceEpoch
              : updated;
    }

    if (createdDate != null) {
      map['createdDate'] = forJson
          ? createdDate!.toUtc().toString()
          : forQuery
              ? createdDate!.millisecondsSinceEpoch
              : createdDate;
    }

    if (isDeleted != null) {
      map['isDeleted'] = forQuery ? (isDeleted! ? 1 : 0) : isDeleted;
    }

    return map;
  }

  Future<Map<String, dynamic>> toMapWithChildren(
      [bool forQuery = false,
      bool forJson = false,
      bool forView = false]) async {
    final map = <String, dynamic>{};
    if (id != null) {
      map['id'] = id;
    }
    if (companyName != null) {
      map['companyName'] = companyName;
    }

    if (addressLine1 != null) {
      map['addressLine1'] = addressLine1;
    }

    if (addressLine2 != null) {
      map['addressLine2'] = addressLine2;
    }

    if (mobile != null) {
      map['mobile'] = mobile;
    }

    if (email != null) {
      map['email'] = email;
    }

    if (currency != null) {
      map['currency'] = currency;
    }

    if (logoUrl != null) {
      map['logoUrl'] = logoUrl;
    }

    if (updated != null) {
      map['updated'] = forJson
          ? updated!.toUtc().toString()
          : forQuery
              ? updated!.millisecondsSinceEpoch
              : updated;
    }

    if (createdDate != null) {
      map['createdDate'] = forJson
          ? createdDate!.toUtc().toString()
          : forQuery
              ? createdDate!.millisecondsSinceEpoch
              : createdDate;
    }

    if (isDeleted != null) {
      map['isDeleted'] = forQuery ? (isDeleted! ? 1 : 0) : isDeleted;
    }

    return map;
  }

  /// This method returns Json String [Company]
  String toJson() {
    return json.encode(toMap(forJson: true));
  }

  /// This method returns Json String [Company]
  Future<String> toJsonWithChilds() async {
    return json.encode(await toMapWithChildren(false, true));
  }

  List<dynamic> toArgs() {
    return [
      companyName,
      addressLine1,
      addressLine2,
      mobile,
      email,
      currency,
      logoUrl,
      updated != null ? updated!.millisecondsSinceEpoch : null,
      createdDate != null ? createdDate!.millisecondsSinceEpoch : null,
      isDeleted
    ];
  }

  List<dynamic> toArgsWithIds() {
    return [
      id,
      companyName,
      addressLine1,
      addressLine2,
      mobile,
      email,
      currency,
      logoUrl,
      updated != null ? updated!.millisecondsSinceEpoch : null,
      createdDate != null ? createdDate!.millisecondsSinceEpoch : null,
      isDeleted
    ];
  }

  static Future<List<Company>?> fromWebUrl(Uri uri,
      {Map<String, String>? headers}) async {
    try {
      final response = await http.get(uri, headers: headers);
      return await fromJson(response.body);
    } catch (e) {
      print(
          'SQFENTITY ERROR Company.fromWebUrl: ErrorMessage: ${e.toString()}');
      return null;
    }
  }

  Future<http.Response> postUrl(Uri uri, {Map<String, String>? headers}) {
    return http.post(uri, headers: headers, body: toJson());
  }

  static Future<List<Company>> fromJson(String jsonBody) async {
    final Iterable list = await json.decode(jsonBody) as Iterable;
    var objList = <Company>[];
    try {
      objList = list
          .map((company) => Company.fromMap(company as Map<String, dynamic>))
          .toList();
    } catch (e) {
      print('SQFENTITY ERROR Company.fromJson: ErrorMessage: ${e.toString()}');
    }
    return objList;
  }

  static Future<List<Company>> fromMapList(List<dynamic> data,
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields,
      bool setDefaultValues = true}) async {
    final List<Company> objList = <Company>[];
    loadedFields = loadedFields ?? [];
    for (final map in data) {
      final obj = Company.fromMap(map as Map<String, dynamic>,
          setDefaultValues: setDefaultValues);

      objList.add(obj);
    }
    return objList;
  }

  /// returns Company by ID if exist, otherwise returns null
  ///
  /// Primary Keys: int? id
  ///
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  ///
  /// ex: getById(preload:true) -> Loads all related objects
  ///
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  ///
  /// ex: getById(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  ///
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  ///
  /// <returns>returns Company if exist, otherwise returns null
  Future<Company?> getById(int? id,
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    if (id == null) {
      return null;
    }
    Company? obj;
    final data = await _mnCompany.getById([id]);
    if (data.length != 0) {
      obj = Company.fromMap(data[0] as Map<String, dynamic>);
    } else {
      obj = null;
    }
    return obj;
  }

  /// Saves the (Company) object. If the id field is null, saves as a new record and returns new id, if id is not null then updates record

  /// <returns>Returns id
  Future<int?> save() async {
    if (id == null || id == 0) {
      id = await _mnCompany.insert(this);
    } else {
      // id= await _upsert(); // removed in sqfentity_gen 1.3.0+6
      await _mnCompany.update(this);
    }

    return id;
  }

  /// saveAs Company. Returns a new Primary Key value of Company

  /// <returns>Returns a new Primary Key value of Company
  Future<int?> saveAs() async {
    id = null;

    return save();
  }

  /// saveAll method saves the sent List<Company> as a bulk in one transaction
  ///
  /// Returns a <List<BoolResult>>
  static Future<List<dynamic>> saveAll(List<Company> companies) async {
    // final results = _mnCompany.saveAll('INSERT OR REPLACE INTO company (id,companyName, addressLine1, addressLine2, mobile, email, currency, logoUrl, updated, createdDate,isDeleted)  VALUES (?,?,?,?,?,?,?,?,?,?,?)',companies);
    // return results; removed in sqfentity_gen 1.3.0+6
    await MyDbModel().batchStart();
    for (final obj in companies) {
      await obj.save();
    }
    //    return MyDbModel().batchCommit();
    final result = await MyDbModel().batchCommit();
    for (int i = 0; i < companies.length; i++) {
      if (companies[i].id == null) {
        companies[i].id = result![i] as int;
      }
    }

    return result!;
  }

  /// Updates if the record exists, otherwise adds a new row

  /// <returns>Returns id

  Future<int?> upsert() async {
    try {
      final result = await _mnCompany.rawInsert(
          'INSERT OR REPLACE INTO company (id,companyName, addressLine1, addressLine2, mobile, email, currency, logoUrl, updated, createdDate,isDeleted)  VALUES (?,?,?,?,?,?,?,?,?,?,?)',
          [
            id,
            companyName,
            addressLine1,
            addressLine2,
            mobile,
            email,
            currency,
            logoUrl,
            updated != null ? updated!.millisecondsSinceEpoch : null,
            createdDate != null ? createdDate!.millisecondsSinceEpoch : null,
            isDeleted
          ]);
      if (result! > 0) {
        saveResult = BoolResult(
            success: true,
            successMessage: 'Company id=$id updated successfully');
      } else {
        saveResult = BoolResult(
            success: false, errorMessage: 'Company id=$id did not update');
      }
      return id;
    } catch (e) {
      saveResult = BoolResult(
          success: false,
          errorMessage: 'Company Save failed. Error: ${e.toString()}');
      return null;
    }
  }

  /// inserts or replaces the sent List<<Company>> as a bulk in one transaction.
  ///
  /// upsertAll() method is faster then saveAll() method. upsertAll() should be used when you are sure that the primary key is greater than zero
  ///
  /// Returns a BoolCommitResult
  Future<BoolCommitResult> upsertAll(List<Company> companies) async {
    final results = await _mnCompany.rawInsertAll(
        'INSERT OR REPLACE INTO company (id,companyName, addressLine1, addressLine2, mobile, email, currency, logoUrl, updated, createdDate,isDeleted)  VALUES (?,?,?,?,?,?,?,?,?,?,?)',
        companies);
    return results;
  }

  /// Deletes Company

  /// <returns>BoolResult res.success=Deleted, not res.success=Can not deleted

  Future<BoolResult> delete([bool hardDelete = false]) async {
    print('SQFENTITIY: delete Company invoked (id=$id)');
    if (!_softDeleteActivated || hardDelete || isDeleted!) {
      return _mnCompany
          .delete(QueryParams(whereString: 'id=?', whereArguments: [id]));
    } else {
      return _mnCompany.updateBatch(
          QueryParams(whereString: 'id=?', whereArguments: [id]),
          {'isDeleted': 1});
    }
  }

  /// Recover Company>

  /// <returns>BoolResult res.success=Recovered, not res.success=Can not recovered
  Future<BoolResult> recover([bool recoverChilds = true]) async {
    print('SQFENTITIY: recover Company invoked (id=$id)');
    {
      return _mnCompany.updateBatch(
          QueryParams(whereString: 'id=?', whereArguments: [id]),
          {'isDeleted': 0});
    }
  }

  CompanyFilterBuilder select(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    return CompanyFilterBuilder(this)
      .._getIsDeleted = getIsDeleted == true
      ..qparams.selectColumns = columnsToSelect;
  }

  CompanyFilterBuilder distinct(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    return CompanyFilterBuilder(this)
      .._getIsDeleted = getIsDeleted == true
      ..qparams.selectColumns = columnsToSelect
      ..qparams.distinct = true;
  }

  void _setDefaultValues() {
    addressLine1 = addressLine1 ?? '';
    addressLine2 = addressLine2 ?? '';
    mobile = mobile ?? '';
    email = email ?? '';
    updated = updated ?? DateTime.now();
    createdDate = createdDate ?? DateTime.now();
    isDeleted = isDeleted ?? false;
  }
  // END METHODS
  // BEGIN CUSTOM CODE
  /*
      you can define customCode property of your SqfEntityTable constant. For example:
      const tablePerson = SqfEntityTable(
      tableName: 'person',
      primaryKeyName: 'id',
      primaryKeyType: PrimaryKeyType.integer_auto_incremental,
      fields: [
        SqfEntityField('firstName', DbType.text),
        SqfEntityField('lastName', DbType.text),
      ],
      customCode: '''
       String fullName()
       { 
         return '$firstName $lastName';
       }
      ''');
     */
  // END CUSTOM CODE
}
// endregion company

// region CompanyField
class CompanyField extends SearchCriteria {
  CompanyField(this.companyFB);
  // { param = DbParameter(); }
  DbParameter param = DbParameter();
  String _waitingNot = '';
  CompanyFilterBuilder companyFB;

  CompanyField get not {
    _waitingNot = ' NOT ';
    return this;
  }

  CompanyFilterBuilder equals(dynamic pValue) {
    param.expression = '=';
    companyFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, companyFB.parameters, param, SqlSyntax.EQuals,
            companyFB._addedBlocks)
        : setCriteria(pValue, companyFB.parameters, param, SqlSyntax.NotEQuals,
            companyFB._addedBlocks);
    _waitingNot = '';
    companyFB._addedBlocks.needEndBlock![companyFB._blockIndex] =
        companyFB._addedBlocks.retVal;
    return companyFB;
  }

  CompanyFilterBuilder equalsOrNull(dynamic pValue) {
    param.expression = '=';
    companyFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, companyFB.parameters, param,
            SqlSyntax.EQualsOrNull, companyFB._addedBlocks)
        : setCriteria(pValue, companyFB.parameters, param,
            SqlSyntax.NotEQualsOrNull, companyFB._addedBlocks);
    _waitingNot = '';
    companyFB._addedBlocks.needEndBlock![companyFB._blockIndex] =
        companyFB._addedBlocks.retVal;
    return companyFB;
  }

  CompanyFilterBuilder isNull() {
    companyFB._addedBlocks = setCriteria(
        0,
        companyFB.parameters,
        param,
        SqlSyntax.IsNULL.replaceAll(SqlSyntax.notKeyword, _waitingNot),
        companyFB._addedBlocks);
    _waitingNot = '';
    companyFB._addedBlocks.needEndBlock![companyFB._blockIndex] =
        companyFB._addedBlocks.retVal;
    return companyFB;
  }

  CompanyFilterBuilder contains(dynamic pValue) {
    if (pValue != null) {
      companyFB._addedBlocks = setCriteria(
          '%${pValue.toString()}%',
          companyFB.parameters,
          param,
          SqlSyntax.Contains.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          companyFB._addedBlocks);
      _waitingNot = '';
      companyFB._addedBlocks.needEndBlock![companyFB._blockIndex] =
          companyFB._addedBlocks.retVal;
    }
    return companyFB;
  }

  CompanyFilterBuilder startsWith(dynamic pValue) {
    if (pValue != null) {
      companyFB._addedBlocks = setCriteria(
          '${pValue.toString()}%',
          companyFB.parameters,
          param,
          SqlSyntax.Contains.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          companyFB._addedBlocks);
      _waitingNot = '';
      companyFB._addedBlocks.needEndBlock![companyFB._blockIndex] =
          companyFB._addedBlocks.retVal;
      companyFB._addedBlocks.needEndBlock![companyFB._blockIndex] =
          companyFB._addedBlocks.retVal;
    }
    return companyFB;
  }

  CompanyFilterBuilder endsWith(dynamic pValue) {
    if (pValue != null) {
      companyFB._addedBlocks = setCriteria(
          '%${pValue.toString()}',
          companyFB.parameters,
          param,
          SqlSyntax.Contains.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          companyFB._addedBlocks);
      _waitingNot = '';
      companyFB._addedBlocks.needEndBlock![companyFB._blockIndex] =
          companyFB._addedBlocks.retVal;
    }
    return companyFB;
  }

  CompanyFilterBuilder between(dynamic pFirst, dynamic pLast) {
    if (pFirst != null && pLast != null) {
      companyFB._addedBlocks = setCriteria(
          pFirst,
          companyFB.parameters,
          param,
          SqlSyntax.Between.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          companyFB._addedBlocks,
          pLast);
    } else if (pFirst != null) {
      if (_waitingNot != '') {
        companyFB._addedBlocks = setCriteria(pFirst, companyFB.parameters,
            param, SqlSyntax.LessThan, companyFB._addedBlocks);
      } else {
        companyFB._addedBlocks = setCriteria(pFirst, companyFB.parameters,
            param, SqlSyntax.GreaterThanOrEquals, companyFB._addedBlocks);
      }
    } else if (pLast != null) {
      if (_waitingNot != '') {
        companyFB._addedBlocks = setCriteria(pLast, companyFB.parameters, param,
            SqlSyntax.GreaterThan, companyFB._addedBlocks);
      } else {
        companyFB._addedBlocks = setCriteria(pLast, companyFB.parameters, param,
            SqlSyntax.LessThanOrEquals, companyFB._addedBlocks);
      }
    }
    _waitingNot = '';
    companyFB._addedBlocks.needEndBlock![companyFB._blockIndex] =
        companyFB._addedBlocks.retVal;
    return companyFB;
  }

  CompanyFilterBuilder greaterThan(dynamic pValue) {
    param.expression = '>';
    companyFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, companyFB.parameters, param,
            SqlSyntax.GreaterThan, companyFB._addedBlocks)
        : setCriteria(pValue, companyFB.parameters, param,
            SqlSyntax.LessThanOrEquals, companyFB._addedBlocks);
    _waitingNot = '';
    companyFB._addedBlocks.needEndBlock![companyFB._blockIndex] =
        companyFB._addedBlocks.retVal;
    return companyFB;
  }

  CompanyFilterBuilder lessThan(dynamic pValue) {
    param.expression = '<';
    companyFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, companyFB.parameters, param, SqlSyntax.LessThan,
            companyFB._addedBlocks)
        : setCriteria(pValue, companyFB.parameters, param,
            SqlSyntax.GreaterThanOrEquals, companyFB._addedBlocks);
    _waitingNot = '';
    companyFB._addedBlocks.needEndBlock![companyFB._blockIndex] =
        companyFB._addedBlocks.retVal;
    return companyFB;
  }

  CompanyFilterBuilder greaterThanOrEquals(dynamic pValue) {
    param.expression = '>=';
    companyFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, companyFB.parameters, param,
            SqlSyntax.GreaterThanOrEquals, companyFB._addedBlocks)
        : setCriteria(pValue, companyFB.parameters, param, SqlSyntax.LessThan,
            companyFB._addedBlocks);
    _waitingNot = '';
    companyFB._addedBlocks.needEndBlock![companyFB._blockIndex] =
        companyFB._addedBlocks.retVal;
    return companyFB;
  }

  CompanyFilterBuilder lessThanOrEquals(dynamic pValue) {
    param.expression = '<=';
    companyFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, companyFB.parameters, param,
            SqlSyntax.LessThanOrEquals, companyFB._addedBlocks)
        : setCriteria(pValue, companyFB.parameters, param,
            SqlSyntax.GreaterThan, companyFB._addedBlocks);
    _waitingNot = '';
    companyFB._addedBlocks.needEndBlock![companyFB._blockIndex] =
        companyFB._addedBlocks.retVal;
    return companyFB;
  }

  CompanyFilterBuilder inValues(dynamic pValue) {
    companyFB._addedBlocks = setCriteria(
        pValue,
        companyFB.parameters,
        param,
        SqlSyntax.IN.replaceAll(SqlSyntax.notKeyword, _waitingNot),
        companyFB._addedBlocks);
    _waitingNot = '';
    companyFB._addedBlocks.needEndBlock![companyFB._blockIndex] =
        companyFB._addedBlocks.retVal;
    return companyFB;
  }
}
// endregion CompanyField

// region CompanyFilterBuilder
class CompanyFilterBuilder extends SearchCriteria {
  CompanyFilterBuilder(Company obj) {
    whereString = '';
    groupByList = <String>[];
    _addedBlocks.needEndBlock!.add(false);
    _addedBlocks.waitingStartBlock!.add(false);
    _obj = obj;
  }
  AddedBlocks _addedBlocks = AddedBlocks(<bool>[], <bool>[]);
  int _blockIndex = 0;
  List<DbParameter> parameters = <DbParameter>[];
  List<String> orderByList = <String>[];
  Company? _obj;
  QueryParams qparams = QueryParams();
  int _pagesize = 0;
  int _page = 0;

  /// put the sql keyword 'AND'
  CompanyFilterBuilder get and {
    if (parameters.isNotEmpty) {
      parameters[parameters.length - 1].wOperator = ' AND ';
    }
    return this;
  }

  /// put the sql keyword 'OR'
  CompanyFilterBuilder get or {
    if (parameters.isNotEmpty) {
      parameters[parameters.length - 1].wOperator = ' OR ';
    }
    return this;
  }

  /// open parentheses
  CompanyFilterBuilder get startBlock {
    _addedBlocks.waitingStartBlock!.add(true);
    _addedBlocks.needEndBlock!.add(false);
    _blockIndex++;
    if (_blockIndex > 1) {
      _addedBlocks.needEndBlock![_blockIndex - 1] = true;
    }
    return this;
  }

  /// String whereCriteria, write raw query without 'where' keyword. Like this: 'field1 like 'test%' and field2 = 3'
  CompanyFilterBuilder where(String? whereCriteria, {dynamic parameterValue}) {
    if (whereCriteria != null && whereCriteria != '') {
      final DbParameter param = DbParameter(
          columnName: parameterValue == null ? null : '',
          hasParameter: parameterValue != null);
      _addedBlocks = setCriteria(parameterValue ?? 0, parameters, param,
          '($whereCriteria)', _addedBlocks);
      _addedBlocks.needEndBlock![_blockIndex] = _addedBlocks.retVal;
    }
    return this;
  }

  /// page = page number,
  ///
  /// pagesize = row(s) per page
  CompanyFilterBuilder page(int page, int pagesize) {
    if (page > 0) {
      _page = page;
    }
    if (pagesize > 0) {
      _pagesize = pagesize;
    }
    return this;
  }

  /// int count = LIMIT
  CompanyFilterBuilder top(int count) {
    if (count > 0) {
      _pagesize = count;
    }
    return this;
  }

  /// close parentheses
  CompanyFilterBuilder get endBlock {
    if (_addedBlocks.needEndBlock![_blockIndex]) {
      parameters[parameters.length - 1].whereString += ' ) ';
    }
    _addedBlocks.needEndBlock!.removeAt(_blockIndex);
    _addedBlocks.waitingStartBlock!.removeAt(_blockIndex);
    _blockIndex--;
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='name, date'
  ///
  /// Example 2: argFields = ['name', 'date']
  CompanyFilterBuilder orderBy(dynamic argFields) {
    if (argFields != null) {
      if (argFields is String) {
        orderByList.add(argFields);
      } else {
        for (String? s in argFields as List<String?>) {
          if (s!.isNotEmpty) {
            orderByList.add(' $s ');
          }
        }
      }
    }
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='field1, field2'
  ///
  /// Example 2: argFields = ['field1', 'field2']
  CompanyFilterBuilder orderByDesc(dynamic argFields) {
    if (argFields != null) {
      if (argFields is String) {
        orderByList.add('$argFields desc ');
      } else {
        for (String? s in argFields as List<String?>) {
          if (s!.isNotEmpty) {
            orderByList.add(' $s desc ');
          }
        }
      }
    }
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='field1, field2'
  ///
  /// Example 2: argFields = ['field1', 'field2']
  CompanyFilterBuilder groupBy(dynamic argFields) {
    if (argFields != null) {
      if (argFields is String) {
        groupByList.add(' $argFields ');
      } else {
        for (String? s in argFields as List<String?>) {
          if (s!.isNotEmpty) {
            groupByList.add(' $s ');
          }
        }
      }
    }
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='name, date'
  ///
  /// Example 2: argFields = ['name', 'date']
  CompanyFilterBuilder having(dynamic argFields) {
    if (argFields != null) {
      if (argFields is String) {
        havingList.add(argFields);
      } else {
        for (String? s in argFields as List<String?>) {
          if (s!.isNotEmpty) {
            havingList.add(' $s ');
          }
        }
      }
    }
    return this;
  }

  CompanyField setField(CompanyField? field, String colName, DbType dbtype) {
    return CompanyField(this)
      ..param = DbParameter(
          dbType: dbtype,
          columnName: colName,
          wStartBlock: _addedBlocks.waitingStartBlock![_blockIndex]);
  }

  CompanyField? _id;
  CompanyField get id {
    return _id = setField(_id, 'id', DbType.integer);
  }

  CompanyField? _companyName;
  CompanyField get companyName {
    return _companyName = setField(_companyName, 'companyName', DbType.text);
  }

  CompanyField? _addressLine1;
  CompanyField get addressLine1 {
    return _addressLine1 = setField(_addressLine1, 'addressLine1', DbType.text);
  }

  CompanyField? _addressLine2;
  CompanyField get addressLine2 {
    return _addressLine2 = setField(_addressLine2, 'addressLine2', DbType.text);
  }

  CompanyField? _mobile;
  CompanyField get mobile {
    return _mobile = setField(_mobile, 'mobile', DbType.text);
  }

  CompanyField? _email;
  CompanyField get email {
    return _email = setField(_email, 'email', DbType.text);
  }

  CompanyField? _currency;
  CompanyField get currency {
    return _currency = setField(_currency, 'currency', DbType.text);
  }

  CompanyField? _logoUrl;
  CompanyField get logoUrl {
    return _logoUrl = setField(_logoUrl, 'logoUrl', DbType.text);
  }

  CompanyField? _updated;
  CompanyField get updated {
    return _updated = setField(_updated, 'updated', DbType.datetimeUtc);
  }

  CompanyField? _createdDate;
  CompanyField get createdDate {
    return _createdDate =
        setField(_createdDate, 'createdDate', DbType.datetimeUtc);
  }

  CompanyField? _isDeleted;
  CompanyField get isDeleted {
    return _isDeleted = setField(_isDeleted, 'isDeleted', DbType.bool);
  }

  bool _getIsDeleted = false;

  void _buildParameters() {
    if (_page > 0 && _pagesize > 0) {
      qparams
        ..limit = _pagesize
        ..offset = (_page - 1) * _pagesize;
    } else {
      qparams
        ..limit = _pagesize
        ..offset = _page;
    }
    for (DbParameter param in parameters) {
      if (param.columnName != null) {
        if (param.value is List && !param.hasParameter) {
          param.value = param.dbType == DbType.text || param.value[0] is String
              ? '\'${param.value.join('\',\'')}\''
              : param.value.join(',');
          whereString += param.whereString
              .replaceAll('{field}', param.columnName!)
              .replaceAll('?', param.value.toString());
          param.value = null;
        } else {
          if (param.value is Map<String, dynamic> &&
              param.value['sql'] != null) {
            param
              ..whereString = param.whereString
                  .replaceAll('?', param.value['sql'].toString())
              ..dbType = DbType.integer
              ..value = param.value['args'];
          }
          whereString +=
              param.whereString.replaceAll('{field}', param.columnName!);
        }
        if (!param.whereString.contains('?')) {
        } else {
          switch (param.dbType) {
            case DbType.bool:
              param.value = param.value == null
                  ? null
                  : param.value == true
                      ? 1
                      : 0;
              param.value2 = param.value2 == null
                  ? null
                  : param.value2 == true
                      ? 1
                      : 0;
              break;
            case DbType.date:
            case DbType.datetime:
            case DbType.datetimeUtc:
              param.value = param.value == null
                  ? null
                  : (param.value as DateTime).millisecondsSinceEpoch;
              param.value2 = param.value2 == null
                  ? null
                  : (param.value2 as DateTime).millisecondsSinceEpoch;
              break;
            default:
          }
          if (param.value != null) {
            if (param.value is List) {
              for (var p in param.value) {
                whereArguments.add(p);
              }
            } else {
              whereArguments.add(param.value);
            }
          }
          if (param.value2 != null) {
            whereArguments.add(param.value2);
          }
        }
      } else {
        whereString += param.whereString;
      }
    }
    if (Company._softDeleteActivated) {
      if (whereString != '') {
        whereString =
            '${!_getIsDeleted ? 'ifnull(isDeleted,0)=0 AND' : ''} ($whereString)';
      } else if (!_getIsDeleted) {
        whereString = 'ifnull(isDeleted,0)=0';
      }
    }

    if (whereString != '') {
      qparams.whereString = whereString;
    }
    qparams
      ..whereArguments = whereArguments
      ..groupBy = groupByList.join(',')
      ..orderBy = orderByList.join(',')
      ..having = havingList.join(',');
  }

  /// Deletes List<Company> bulk by query
  ///
  /// <returns>BoolResult res.success=Deleted, not res.success=Can not deleted
  Future<BoolResult> delete([bool hardDelete = false]) async {
    _buildParameters();
    var r = BoolResult(success: false);

    if (Company._softDeleteActivated && !hardDelete) {
      r = await _obj!._mnCompany.updateBatch(qparams, {'isDeleted': 1});
    } else {
      r = await _obj!._mnCompany.delete(qparams);
    }
    return r;
  }

  /// Recover List<Company> bulk by query
  Future<BoolResult> recover() async {
    _getIsDeleted = true;
    _buildParameters();
    print('SQFENTITIY: recover Company bulk invoked');
    return _obj!._mnCompany.updateBatch(qparams, {'isDeleted': 0});
  }

  /// using:
  ///
  /// update({'fieldName': Value})
  ///
  /// fieldName must be String. Value is dynamic, it can be any of the (int, bool, String.. )
  Future<BoolResult> update(Map<String, dynamic> values) {
    _buildParameters();
    if (qparams.limit! > 0 || qparams.offset! > 0) {
      qparams.whereString =
          'id IN (SELECT id from company ${qparams.whereString!.isNotEmpty ? 'WHERE ${qparams.whereString}' : ''}${qparams.limit! > 0 ? ' LIMIT ${qparams.limit}' : ''}${qparams.offset! > 0 ? ' OFFSET ${qparams.offset}' : ''})';
    }
    return _obj!._mnCompany.updateBatch(qparams, values);
  }

  /// This method always returns Company Obj if exist, otherwise returns null
  ///
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  ///
  /// ex: toSingle(preload:true) -> Loads all related objects
  ///
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  ///
  /// ex: toSingle(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  ///
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  ///
  /// <returns>List<Company>
  Future<Company?> toSingle(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    _pagesize = 1;
    _buildParameters();
    final objFuture = _obj!._mnCompany.toList(qparams);
    final data = await objFuture;
    Company? obj;
    if (data.isNotEmpty) {
      obj = Company.fromMap(data[0] as Map<String, dynamic>);
    } else {
      obj = null;
    }
    return obj;
  }

  /// This method returns int. [Company]
  ///
  /// <returns>int
  Future<int> toCount([VoidCallback Function(int c)? companyCount]) async {
    _buildParameters();
    qparams.selectColumns = ['COUNT(1) AS CNT'];
    final companiesFuture = await _obj!._mnCompany.toList(qparams);
    final int count = companiesFuture[0]['CNT'] as int;
    if (companyCount != null) {
      companyCount(count);
    }
    return count;
  }

  /// This method returns List<Company> [Company]
  ///
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  ///
  /// ex: toList(preload:true) -> Loads all related objects
  ///
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  ///
  /// ex: toList(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  ///
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  ///
  /// <returns>List<Company>
  Future<List<Company>> toList(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    final data = await toMapList();
    final List<Company> companiesData = await Company.fromMapList(data,
        preload: preload,
        preloadFields: preloadFields,
        loadParents: loadParents,
        loadedFields: loadedFields,
        setDefaultValues: qparams.selectColumns == null);
    return companiesData;
  }

  /// This method returns Json String [Company]
  Future<String> toJson() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(o.toMap(forJson: true));
    }
    return json.encode(list);
  }

  /// This method returns Json String. [Company]
  Future<String> toJsonWithChilds() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(await o.toMapWithChildren(false, true));
    }
    return json.encode(list);
  }

  /// This method returns List<dynamic>. [Company]
  ///
  /// <returns>List<dynamic>
  Future<List<dynamic>> toMapList() async {
    _buildParameters();
    return await _obj!._mnCompany.toList(qparams);
  }

  /// This method returns Primary Key List SQL and Parameters retVal = Map<String,dynamic>. [Company]
  ///
  /// retVal['sql'] = SQL statement string, retVal['args'] = whereArguments List<dynamic>;
  ///
  /// <returns>List<String>
  Map<String, dynamic> toListPrimaryKeySQL([bool buildParameters = true]) {
    final Map<String, dynamic> _retVal = <String, dynamic>{};
    if (buildParameters) {
      _buildParameters();
    }
    _retVal['sql'] = 'SELECT `id` FROM company WHERE ${qparams.whereString}';
    _retVal['args'] = qparams.whereArguments;
    return _retVal;
  }

  /// This method returns Primary Key List<int>.
  /// <returns>List<int>
  Future<List<int>> toListPrimaryKey([bool buildParameters = true]) async {
    if (buildParameters) {
      _buildParameters();
    }
    final List<int> idData = <int>[];
    qparams.selectColumns = ['id'];
    final idFuture = await _obj!._mnCompany.toList(qparams);

    final int count = idFuture.length;
    for (int i = 0; i < count; i++) {
      idData.add(idFuture[i]['id'] as int);
    }
    return idData;
  }

  /// Returns List<dynamic> for selected columns. Use this method for 'groupBy' with min,max,avg..  [Company]
  ///
  /// Sample usage: (see EXAMPLE 4.2 at https://github.com/hhtokpinar/sqfEntity#group-by)
  Future<List<dynamic>> toListObject() async {
    _buildParameters();

    final objectFuture = _obj!._mnCompany.toList(qparams);

    final List<dynamic> objectsData = <dynamic>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i]);
    }
    return objectsData;
  }

  /// Returns List<String> for selected first column
  ///
  /// Sample usage: await Company.select(columnsToSelect: ['columnName']).toListString()
  Future<List<String>> toListString(
      [VoidCallback Function(List<String> o)? listString]) async {
    _buildParameters();

    final objectFuture = _obj!._mnCompany.toList(qparams);

    final List<String> objectsData = <String>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i][qparams.selectColumns![0]].toString());
    }
    if (listString != null) {
      listString(objectsData);
    }
    return objectsData;
  }
}
// endregion CompanyFilterBuilder

// region CompanyFields
class CompanyFields {
  static TableField? _fId;
  static TableField get id {
    return _fId = _fId ?? SqlSyntax.setField(_fId, 'id', DbType.integer);
  }

  static TableField? _fCompanyName;
  static TableField get companyName {
    return _fCompanyName = _fCompanyName ??
        SqlSyntax.setField(_fCompanyName, 'companyName', DbType.text);
  }

  static TableField? _fAddressLine1;
  static TableField get addressLine1 {
    return _fAddressLine1 = _fAddressLine1 ??
        SqlSyntax.setField(_fAddressLine1, 'addressLine1', DbType.text);
  }

  static TableField? _fAddressLine2;
  static TableField get addressLine2 {
    return _fAddressLine2 = _fAddressLine2 ??
        SqlSyntax.setField(_fAddressLine2, 'addressLine2', DbType.text);
  }

  static TableField? _fMobile;
  static TableField get mobile {
    return _fMobile =
        _fMobile ?? SqlSyntax.setField(_fMobile, 'mobile', DbType.text);
  }

  static TableField? _fEmail;
  static TableField get email {
    return _fEmail =
        _fEmail ?? SqlSyntax.setField(_fEmail, 'email', DbType.text);
  }

  static TableField? _fCurrency;
  static TableField get currency {
    return _fCurrency =
        _fCurrency ?? SqlSyntax.setField(_fCurrency, 'currency', DbType.text);
  }

  static TableField? _fLogoUrl;
  static TableField get logoUrl {
    return _fLogoUrl =
        _fLogoUrl ?? SqlSyntax.setField(_fLogoUrl, 'logoUrl', DbType.text);
  }

  static TableField? _fUpdated;
  static TableField get updated {
    return _fUpdated = _fUpdated ??
        SqlSyntax.setField(_fUpdated, 'updated', DbType.datetimeUtc);
  }

  static TableField? _fCreatedDate;
  static TableField get createdDate {
    return _fCreatedDate = _fCreatedDate ??
        SqlSyntax.setField(_fCreatedDate, 'createdDate', DbType.datetimeUtc);
  }

  static TableField? _fIsDeleted;
  static TableField get isDeleted {
    return _fIsDeleted = _fIsDeleted ??
        SqlSyntax.setField(_fIsDeleted, 'isDeleted', DbType.integer);
  }
}
// endregion CompanyFields

//region CompanyManager
class CompanyManager extends SqfEntityProvider {
  CompanyManager()
      : super(MyDbModel(),
            tableName: _tableName,
            primaryKeyList: _primaryKeyList,
            whereStr: _whereStr);
  static final String _tableName = 'company';
  static final List<String> _primaryKeyList = ['id'];
  static final String _whereStr = 'id=?';
}

//endregion CompanyManager
/// Region SEQUENCE IdentitySequence
class IdentitySequence {
  /// Assigns a new value when it is triggered and returns the new value
  /// returns Future<int>
  Future<int> nextVal([VoidCallback Function(int o)? nextval]) async {
    final val = await MyDbModelSequenceManager()
        .sequence(SequenceIdentitySequence.getInstance, true);
    if (nextval != null) {
      nextval(val);
    }
    return val;
  }

  /// Get the current value
  /// returns Future<int>
  Future<int> currentVal([VoidCallback Function(int o)? currentval]) async {
    final val = await MyDbModelSequenceManager()
        .sequence(SequenceIdentitySequence.getInstance, false);
    if (currentval != null) {
      currentval(val);
    }
    return val;
  }

  /// Reset sequence to start value
  /// returns start value
  Future<int> reset([VoidCallback Function(int o)? currentval]) async {
    final val = await MyDbModelSequenceManager()
        .sequence(SequenceIdentitySequence.getInstance, false, reset: true);
    if (currentval != null) {
      currentval(val);
    }
    return val;
  }
}

/// End Region SEQUENCE IdentitySequence

class MyDbModelSequenceManager extends SqfEntityProvider {
  MyDbModelSequenceManager() : super(MyDbModel());
}
// END OF ENTITIES
